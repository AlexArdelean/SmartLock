
Project_RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00001bf2  00001c86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bf2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000651  00800186  00800186  00001d0c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034dc  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000111a  00000000  00000000  00005540  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002195  00000000  00000000  0000665a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000778  00000000  00000000  000087f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010c2  00000000  00000000  00008f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e25  00000000  00000000  0000a02a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  0000be4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	86 c0       	rjmp	.+268    	; 0x10e <__ctors_end>
       2:	00 00       	nop
       4:	a2 c0       	rjmp	.+324    	; 0x14a <__bad_interrupt>
       6:	00 00       	nop
       8:	a0 c0       	rjmp	.+320    	; 0x14a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c0       	rjmp	.+316    	; 0x14a <__bad_interrupt>
       e:	00 00       	nop
      10:	9c c0       	rjmp	.+312    	; 0x14a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c0       	rjmp	.+308    	; 0x14a <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c0       	rjmp	.+304    	; 0x14a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c0       	rjmp	.+300    	; 0x14a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c0       	rjmp	.+296    	; 0x14a <__bad_interrupt>
      22:	00 00       	nop
      24:	92 c0       	rjmp	.+292    	; 0x14a <__bad_interrupt>
      26:	00 00       	nop
      28:	90 c0       	rjmp	.+288    	; 0x14a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8e c0       	rjmp	.+284    	; 0x14a <__bad_interrupt>
      2e:	00 00       	nop
      30:	8c c0       	rjmp	.+280    	; 0x14a <__bad_interrupt>
      32:	00 00       	nop
      34:	17 c7       	rjmp	.+3630   	; 0xe64 <__vector_13>
      36:	00 00       	nop
      38:	88 c0       	rjmp	.+272    	; 0x14a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	86 c0       	rjmp	.+268    	; 0x14a <__bad_interrupt>
      3e:	00 00       	nop
      40:	84 c0       	rjmp	.+264    	; 0x14a <__bad_interrupt>
      42:	00 00       	nop
      44:	82 c0       	rjmp	.+260    	; 0x14a <__bad_interrupt>
      46:	00 00       	nop
      48:	80 c0       	rjmp	.+256    	; 0x14a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7e c0       	rjmp	.+252    	; 0x14a <__bad_interrupt>
      4e:	00 00       	nop
      50:	7c c0       	rjmp	.+248    	; 0x14a <__bad_interrupt>
      52:	00 00       	nop
      54:	7a c0       	rjmp	.+244    	; 0x14a <__bad_interrupt>
      56:	00 00       	nop
      58:	78 c0       	rjmp	.+240    	; 0x14a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	76 c0       	rjmp	.+236    	; 0x14a <__bad_interrupt>
      5e:	00 00       	nop
      60:	74 c0       	rjmp	.+232    	; 0x14a <__bad_interrupt>
      62:	00 00       	nop
      64:	72 c0       	rjmp	.+228    	; 0x14a <__bad_interrupt>
      66:	00 00       	nop
      68:	70 c0       	rjmp	.+224    	; 0x14a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6e c0       	rjmp	.+220    	; 0x14a <__bad_interrupt>
      6e:	00 00       	nop
      70:	6c c0       	rjmp	.+216    	; 0x14a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a c0       	rjmp	.+212    	; 0x14a <__bad_interrupt>
      76:	00 00       	nop
      78:	68 c0       	rjmp	.+208    	; 0x14a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	66 c0       	rjmp	.+204    	; 0x14a <__bad_interrupt>
      7e:	00 00       	nop
      80:	64 c0       	rjmp	.+200    	; 0x14a <__bad_interrupt>
      82:	00 00       	nop
      84:	62 c0       	rjmp	.+196    	; 0x14a <__bad_interrupt>
      86:	00 00       	nop
      88:	60 c0       	rjmp	.+192    	; 0x14a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	07 63       	ori	r16, 0x37	; 55
      8e:	42 36       	cpi	r20, 0x62	; 98
      90:	b7 9b       	sbis	0x16, 7	; 22
      92:	d8 a7       	std	Y+40, r29	; 0x28
      94:	1a 39       	cpi	r17, 0x9A	; 154
      96:	68 56       	subi	r22, 0x68	; 104
      98:	18 ae       	std	Y+56, r1	; 0x38
      9a:	ba ab       	std	Y+50, r27	; 0x32
      9c:	55 8c       	ldd	r5, Z+29	; 0x1d
      9e:	1d 3c       	cpi	r17, 0xCD	; 205
      a0:	b7 cc       	rjmp	.-1682   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
      a2:	57 63       	ori	r21, 0x37	; 55
      a4:	bd 6d       	ori	r27, 0xDD	; 221
      a6:	ed fd       	.word	0xfded	; ????
      a8:	75 3e       	cpi	r23, 0xE5	; 229
      aa:	f6 17       	cp	r31, r22
      ac:	72 31       	cpi	r23, 0x12	; 18
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <InitLockTask_Tick+0x27a>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e4       	ldi	r29, 0x40	; 64
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e2 ef       	ldi	r30, 0xF2	; 242
     122:	fb e1       	ldi	r31, 0x1B	; 27
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a6 38       	cpi	r26, 0x86	; 134
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	27 e0       	ldi	r18, 0x07	; 7
     136:	a6 e8       	ldi	r26, 0x86	; 134
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a7 3d       	cpi	r26, 0xD7	; 215
     140:	b2 07       	cpc	r27, r18
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	1f d5       	rcall	.+2622   	; 0xb84 <main>
     146:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <_exit>

0000014a <__bad_interrupt>:
     14a:	5a cf       	rjmp	.-332    	; 0x0 <__vectors>

0000014c <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     150:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     152:	db d7       	rcall	.+4022   	; 0x110a <vTaskSuspendAll>
     154:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <__data_end>
     158:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <__data_end+0x1>
     15c:	c9 01       	movw	r24, r18
     15e:	8c 0f       	add	r24, r28
     160:	9d 1f       	adc	r25, r29
     162:	8c 3d       	cpi	r24, 0xDC	; 220
     164:	45 e0       	ldi	r20, 0x05	; 5
     166:	94 07       	cpc	r25, r20
     168:	58 f4       	brcc	.+22     	; 0x180 <pvPortMalloc+0x34>
     16a:	28 17       	cp	r18, r24
     16c:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     16e:	58 f4       	brcc	.+22     	; 0x186 <pvPortMalloc+0x3a>
     170:	e9 01       	movw	r28, r18
     172:	c8 57       	subi	r28, 0x78	; 120
			xNextFreeByte += xWantedSize;			
     174:	de 4f       	sbci	r29, 0xFE	; 254
     176:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <__data_end+0x1>
     17a:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     17e:	05 c0       	rjmp	.+10     	; 0x18a <pvPortMalloc+0x3e>
     180:	c0 e0       	ldi	r28, 0x00	; 0
     182:	d0 e0       	ldi	r29, 0x00	; 0
     184:	02 c0       	rjmp	.+4      	; 0x18a <pvPortMalloc+0x3e>
     186:	c0 e0       	ldi	r28, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     188:	d0 e0       	ldi	r29, 0x00	; 0
     18a:	0e 94 4d 09 	call	0x129a	; 0x129a <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     18e:	ce 01       	movw	r24, r28
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     196:	08 95       	ret

00000198 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     198:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     19a:	03 96       	adiw	r24, 0x03	; 3
     19c:	92 83       	std	Z+2, r25	; 0x02
     19e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     1a0:	2f ef       	ldi	r18, 0xFF	; 255
     1a2:	3f ef       	ldi	r19, 0xFF	; 255
     1a4:	34 83       	std	Z+4, r19	; 0x04
     1a6:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     1a8:	96 83       	std	Z+6, r25	; 0x06
     1aa:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     1ac:	90 87       	std	Z+8, r25	; 0x08
     1ae:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     1b0:	10 82       	st	Z, r1
     1b2:	08 95       	ret

000001b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     1b4:	fc 01       	movw	r30, r24
     1b6:	11 86       	std	Z+9, r1	; 0x09
     1b8:	10 86       	std	Z+8, r1	; 0x08
     1ba:	08 95       	ret

000001bc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	fc 01       	movw	r30, r24
     1c2:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     1c4:	21 81       	ldd	r18, Z+1	; 0x01
     1c6:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     1c8:	e9 01       	movw	r28, r18
     1ca:	8a 81       	ldd	r24, Y+2	; 0x02
     1cc:	9b 81       	ldd	r25, Y+3	; 0x03
     1ce:	13 96       	adiw	r26, 0x03	; 3
     1d0:	9c 93       	st	X, r25
     1d2:	8e 93       	st	-X, r24
     1d4:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     1d6:	81 81       	ldd	r24, Z+1	; 0x01
     1d8:	92 81       	ldd	r25, Z+2	; 0x02
     1da:	15 96       	adiw	r26, 0x05	; 5
     1dc:	9c 93       	st	X, r25
     1de:	8e 93       	st	-X, r24
     1e0:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1e2:	8a 81       	ldd	r24, Y+2	; 0x02
     1e4:	9b 81       	ldd	r25, Y+3	; 0x03
     1e6:	ec 01       	movw	r28, r24
     1e8:	7d 83       	std	Y+5, r23	; 0x05
     1ea:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     1ec:	e9 01       	movw	r28, r18
     1ee:	7b 83       	std	Y+3, r23	; 0x03
     1f0:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     1f2:	72 83       	std	Z+2, r23	; 0x02
     1f4:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1f6:	19 96       	adiw	r26, 0x09	; 9
     1f8:	fc 93       	st	X, r31
     1fa:	ee 93       	st	-X, r30
     1fc:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     1fe:	80 81       	ld	r24, Z
     200:	8f 5f       	subi	r24, 0xFF	; 255
     202:	80 83       	st	Z, r24
}
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     210:	48 81       	ld	r20, Y
     212:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     214:	4f 3f       	cpi	r20, 0xFF	; 255
     216:	2f ef       	ldi	r18, 0xFF	; 255
     218:	52 07       	cpc	r21, r18
     21a:	31 f4       	brne	.+12     	; 0x228 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     21c:	dc 01       	movw	r26, r24
     21e:	17 96       	adiw	r26, 0x07	; 7
     220:	ed 91       	ld	r30, X+
     222:	fc 91       	ld	r31, X
     224:	18 97       	sbiw	r26, 0x08	; 8
     226:	17 c0       	rjmp	.+46     	; 0x256 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     228:	fc 01       	movw	r30, r24
     22a:	33 96       	adiw	r30, 0x03	; 3
     22c:	dc 01       	movw	r26, r24
     22e:	15 96       	adiw	r26, 0x05	; 5
     230:	2d 91       	ld	r18, X+
     232:	3c 91       	ld	r19, X
     234:	16 97       	sbiw	r26, 0x06	; 6
     236:	d9 01       	movw	r26, r18
     238:	2d 91       	ld	r18, X+
     23a:	3c 91       	ld	r19, X
     23c:	42 17       	cp	r20, r18
     23e:	53 07       	cpc	r21, r19
     240:	50 f0       	brcs	.+20     	; 0x256 <vListInsert+0x4c>
     242:	02 80       	ldd	r0, Z+2	; 0x02
     244:	f3 81       	ldd	r31, Z+3	; 0x03
     246:	e0 2d       	mov	r30, r0
     248:	a2 81       	ldd	r26, Z+2	; 0x02
     24a:	b3 81       	ldd	r27, Z+3	; 0x03
     24c:	2d 91       	ld	r18, X+
     24e:	3c 91       	ld	r19, X
     250:	42 17       	cp	r20, r18
     252:	53 07       	cpc	r21, r19
     254:	b0 f7       	brcc	.-20     	; 0x242 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     256:	a2 81       	ldd	r26, Z+2	; 0x02
     258:	b3 81       	ldd	r27, Z+3	; 0x03
     25a:	bb 83       	std	Y+3, r27	; 0x03
     25c:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     25e:	15 96       	adiw	r26, 0x05	; 5
     260:	dc 93       	st	X, r29
     262:	ce 93       	st	-X, r28
     264:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     266:	fd 83       	std	Y+5, r31	; 0x05
     268:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     26a:	d3 83       	std	Z+3, r29	; 0x03
     26c:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     26e:	99 87       	std	Y+9, r25	; 0x09
     270:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     272:	fc 01       	movw	r30, r24
     274:	20 81       	ld	r18, Z
     276:	2f 5f       	subi	r18, 0xFF	; 255
     278:	20 83       	st	Z, r18
}
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     280:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     282:	a2 81       	ldd	r26, Z+2	; 0x02
     284:	b3 81       	ldd	r27, Z+3	; 0x03
     286:	84 81       	ldd	r24, Z+4	; 0x04
     288:	95 81       	ldd	r25, Z+5	; 0x05
     28a:	15 96       	adiw	r26, 0x05	; 5
     28c:	9c 93       	st	X, r25
     28e:	8e 93       	st	-X, r24
     290:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     292:	a4 81       	ldd	r26, Z+4	; 0x04
     294:	b5 81       	ldd	r27, Z+5	; 0x05
     296:	82 81       	ldd	r24, Z+2	; 0x02
     298:	93 81       	ldd	r25, Z+3	; 0x03
     29a:	13 96       	adiw	r26, 0x03	; 3
     29c:	9c 93       	st	X, r25
     29e:	8e 93       	st	-X, r24
     2a0:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     2a2:	a0 85       	ldd	r26, Z+8	; 0x08
     2a4:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     2a6:	11 96       	adiw	r26, 0x01	; 1
     2a8:	8d 91       	ld	r24, X+
     2aa:	9c 91       	ld	r25, X
     2ac:	12 97       	sbiw	r26, 0x02	; 2
     2ae:	e8 17       	cp	r30, r24
     2b0:	f9 07       	cpc	r31, r25
     2b2:	31 f4       	brne	.+12     	; 0x2c0 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     2b4:	84 81       	ldd	r24, Z+4	; 0x04
     2b6:	95 81       	ldd	r25, Z+5	; 0x05
     2b8:	12 96       	adiw	r26, 0x02	; 2
     2ba:	9c 93       	st	X, r25
     2bc:	8e 93       	st	-X, r24
     2be:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     2c0:	11 86       	std	Z+9, r1	; 0x09
     2c2:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     2c4:	8c 91       	ld	r24, X
     2c6:	81 50       	subi	r24, 0x01	; 1
     2c8:	8c 93       	st	X, r24
     2ca:	08 95       	ret

000002cc <initUSART>:
enum PIR_Sensor {PIR_INIT} PIR_state, PIR_state2, PIR_state3;
void PIR_Init(){
	PIR_state = PIR_INIT;
}
void PIR_Detect_Init(){
	PIR_state2 = PIR_INIT;
     2cc:	81 30       	cpi	r24, 0x01	; 1
     2ce:	81 f0       	breq	.+32     	; 0x2f0 <initUSART+0x24>
     2d0:	e1 ec       	ldi	r30, 0xC1	; 193
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	80 81       	ld	r24, Z
     2d6:	88 61       	ori	r24, 0x18	; 24
     2d8:	80 83       	st	Z, r24
     2da:	e2 ec       	ldi	r30, 0xC2	; 194
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	80 81       	ld	r24, Z
     2e0:	86 60       	ori	r24, 0x06	; 6
     2e2:	80 83       	st	Z, r24
     2e4:	83 e3       	ldi	r24, 0x33	; 51
     2e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     2ea:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     2ee:	08 95       	ret
     2f0:	e9 ec       	ldi	r30, 0xC9	; 201
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	88 61       	ori	r24, 0x18	; 24
     2f8:	80 83       	st	Z, r24
     2fa:	ea ec       	ldi	r30, 0xCA	; 202
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	80 81       	ld	r24, Z
     300:	86 60       	ori	r24, 0x06	; 6
     302:	80 83       	st	Z, r24
     304:	83 e3       	ldi	r24, 0x33	; 51
     306:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     30a:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     30e:	08 95       	ret

00000310 <USART_Send>:
     310:	61 30       	cpi	r22, 0x01	; 1
     312:	41 f0       	breq	.+16     	; 0x324 <USART_Send+0x14>
     314:	e0 ec       	ldi	r30, 0xC0	; 192
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	90 81       	ld	r25, Z
     31a:	95 ff       	sbrs	r25, 5
     31c:	fd cf       	rjmp	.-6      	; 0x318 <USART_Send+0x8>
     31e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     322:	08 95       	ret
     324:	e8 ec       	ldi	r30, 0xC8	; 200
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	90 81       	ld	r25, Z
     32a:	95 ff       	sbrs	r25, 5
     32c:	fd cf       	rjmp	.-6      	; 0x328 <USART_Send+0x18>
     32e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     332:	08 95       	ret

00000334 <UART_Send_BlueTooth>:
     334:	cf 92       	push	r12
     336:	df 92       	push	r13
     338:	ef 92       	push	r14
     33a:	ff 92       	push	r15
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	fc 01       	movw	r30, r24
     346:	01 90       	ld	r0, Z+
     348:	00 20       	and	r0, r0
     34a:	e9 f7       	brne	.-6      	; 0x346 <UART_Send_BlueTooth+0x12>
     34c:	31 97       	sbiw	r30, 0x01	; 1
     34e:	e8 1b       	sub	r30, r24
     350:	f9 0b       	sbc	r31, r25
     352:	61 11       	cpse	r22, r1
     354:	19 c0       	rjmp	.+50     	; 0x388 <UART_Send_BlueTooth+0x54>
     356:	ff 27       	eor	r31, r31
     358:	1e 16       	cp	r1, r30
     35a:	1f 06       	cpc	r1, r31
     35c:	bc f5       	brge	.+110    	; 0x3cc <UART_Send_BlueTooth+0x98>
     35e:	6c 01       	movw	r12, r24
     360:	8c 01       	movw	r16, r24
     362:	0e 0f       	add	r16, r30
     364:	1f 1f       	adc	r17, r31
     366:	c0 ec       	ldi	r28, 0xC0	; 192
     368:	d0 e0       	ldi	r29, 0x00	; 0
     36a:	98 81       	ld	r25, Y
     36c:	95 ff       	sbrs	r25, 5
     36e:	fd cf       	rjmp	.-6      	; 0x36a <UART_Send_BlueTooth+0x36>
     370:	60 e0       	ldi	r22, 0x00	; 0
     372:	f6 01       	movw	r30, r12
     374:	81 91       	ld	r24, Z+
     376:	6f 01       	movw	r12, r30
     378:	cb df       	rcall	.-106    	; 0x310 <USART_Send>
     37a:	98 81       	ld	r25, Y
     37c:	96 ff       	sbrs	r25, 6
     37e:	fd cf       	rjmp	.-6      	; 0x37a <UART_Send_BlueTooth+0x46>
     380:	0c 15       	cp	r16, r12
     382:	1d 05       	cpc	r17, r13
     384:	91 f7       	brne	.-28     	; 0x36a <UART_Send_BlueTooth+0x36>
     386:	22 c0       	rjmp	.+68     	; 0x3cc <UART_Send_BlueTooth+0x98>
     388:	61 30       	cpi	r22, 0x01	; 1
     38a:	01 f5       	brne	.+64     	; 0x3cc <UART_Send_BlueTooth+0x98>
     38c:	ff 27       	eor	r31, r31
     38e:	1e 16       	cp	r1, r30
     390:	1f 06       	cpc	r1, r31
     392:	e4 f4       	brge	.+56     	; 0x3cc <UART_Send_BlueTooth+0x98>
     394:	6c 01       	movw	r12, r24
     396:	7c 01       	movw	r14, r24
     398:	ee 0e       	add	r14, r30
     39a:	ff 1e       	adc	r15, r31
     39c:	00 ec       	ldi	r16, 0xC0	; 192
     39e:	10 e0       	ldi	r17, 0x00	; 0
     3a0:	c8 ec       	ldi	r28, 0xC8	; 200
     3a2:	d0 e0       	ldi	r29, 0x00	; 0
     3a4:	f8 01       	movw	r30, r16
     3a6:	90 81       	ld	r25, Z
     3a8:	95 ff       	sbrs	r25, 5
     3aa:	fc cf       	rjmp	.-8      	; 0x3a4 <UART_Send_BlueTooth+0x70>
     3ac:	88 81       	ld	r24, Y
     3ae:	85 ff       	sbrs	r24, 5
     3b0:	04 c0       	rjmp	.+8      	; 0x3ba <UART_Send_BlueTooth+0x86>
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	f6 01       	movw	r30, r12
     3b6:	80 81       	ld	r24, Z
     3b8:	ab df       	rcall	.-170    	; 0x310 <USART_Send>
     3ba:	98 81       	ld	r25, Y
     3bc:	96 ff       	sbrs	r25, 6
     3be:	fd cf       	rjmp	.-6      	; 0x3ba <UART_Send_BlueTooth+0x86>
     3c0:	ff ef       	ldi	r31, 0xFF	; 255
     3c2:	cf 1a       	sub	r12, r31
     3c4:	df 0a       	sbc	r13, r31
     3c6:	ec 14       	cp	r14, r12
     3c8:	fd 04       	cpc	r15, r13
     3ca:	61 f7       	brne	.-40     	; 0x3a4 <UART_Send_BlueTooth+0x70>
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	df 90       	pop	r13
     3da:	cf 90       	pop	r12
     3dc:	08 95       	ret

000003de <GetKeypadKey>:
     3de:	8f ee       	ldi	r24, 0xEF	; 239
     3e0:	82 b9       	out	0x02, r24	; 2
     3e2:	00 00       	nop
     3e4:	00 9b       	sbis	0x00, 0	; 0
     3e6:	29 c0       	rjmp	.+82     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     3e8:	01 9b       	sbis	0x00, 1	; 0
     3ea:	29 c0       	rjmp	.+82     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3ec:	02 9b       	sbis	0x00, 2	; 0
     3ee:	29 c0       	rjmp	.+82     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3f0:	03 9b       	sbis	0x00, 3	; 0
     3f2:	29 c0       	rjmp	.+82     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     3f4:	8f ed       	ldi	r24, 0xDF	; 223
     3f6:	82 b9       	out	0x02, r24	; 2
     3f8:	00 00       	nop
     3fa:	00 9b       	sbis	0x00, 0	; 0
     3fc:	26 c0       	rjmp	.+76     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     3fe:	01 9b       	sbis	0x00, 1	; 0
     400:	26 c0       	rjmp	.+76     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     402:	02 9b       	sbis	0x00, 2	; 0
     404:	26 c0       	rjmp	.+76     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     406:	03 9b       	sbis	0x00, 3	; 0
     408:	26 c0       	rjmp	.+76     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     40a:	8f eb       	ldi	r24, 0xBF	; 191
     40c:	82 b9       	out	0x02, r24	; 2
     40e:	00 00       	nop
     410:	00 9b       	sbis	0x00, 0	; 0
     412:	23 c0       	rjmp	.+70     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     414:	01 9b       	sbis	0x00, 1	; 0
     416:	23 c0       	rjmp	.+70     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     418:	02 9b       	sbis	0x00, 2	; 0
     41a:	23 c0       	rjmp	.+70     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     41c:	03 9b       	sbis	0x00, 3	; 0
     41e:	23 c0       	rjmp	.+70     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     420:	8f e7       	ldi	r24, 0x7F	; 127
     422:	82 b9       	out	0x02, r24	; 2
     424:	00 00       	nop
     426:	00 9b       	sbis	0x00, 0	; 0
     428:	20 c0       	rjmp	.+64     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     42a:	01 9b       	sbis	0x00, 1	; 0
     42c:	20 c0       	rjmp	.+64     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     42e:	02 9b       	sbis	0x00, 2	; 0
     430:	20 c0       	rjmp	.+64     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     432:	03 9b       	sbis	0x00, 3	; 0
     434:	20 c0       	rjmp	.+64     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	08 95       	ret
     43a:	81 e3       	ldi	r24, 0x31	; 49
     43c:	08 95       	ret
     43e:	84 e3       	ldi	r24, 0x34	; 52
     440:	08 95       	ret
     442:	87 e3       	ldi	r24, 0x37	; 55
     444:	08 95       	ret
     446:	8a e2       	ldi	r24, 0x2A	; 42
     448:	08 95       	ret
     44a:	82 e3       	ldi	r24, 0x32	; 50
     44c:	08 95       	ret
     44e:	85 e3       	ldi	r24, 0x35	; 53
     450:	08 95       	ret
     452:	88 e3       	ldi	r24, 0x38	; 56
     454:	08 95       	ret
     456:	80 e3       	ldi	r24, 0x30	; 48
     458:	08 95       	ret
     45a:	83 e3       	ldi	r24, 0x33	; 51
     45c:	08 95       	ret
     45e:	86 e3       	ldi	r24, 0x36	; 54
     460:	08 95       	ret
     462:	89 e3       	ldi	r24, 0x39	; 57
     464:	08 95       	ret
     466:	83 e2       	ldi	r24, 0x23	; 35
     468:	08 95       	ret
     46a:	81 e4       	ldi	r24, 0x41	; 65
     46c:	08 95       	ret
     46e:	82 e4       	ldi	r24, 0x42	; 66
     470:	08 95       	ret
     472:	83 e4       	ldi	r24, 0x43	; 67
     474:	08 95       	ret
     476:	84 e4       	ldi	r24, 0x44	; 68
     478:	08 95       	ret

0000047a <delay_ms>:
     47a:	18 16       	cp	r1, r24
     47c:	19 06       	cpc	r1, r25
     47e:	5c f0       	brlt	.+22     	; 0x496 <delay_ms+0x1c>
     480:	08 95       	ret
     482:	00 00       	nop
     484:	21 50       	subi	r18, 0x01	; 1
     486:	31 09       	sbc	r19, r1
     488:	e1 f7       	brne	.-8      	; 0x482 <delay_ms+0x8>
     48a:	4f 5f       	subi	r20, 0xFF	; 255
     48c:	5f 4f       	sbci	r21, 0xFF	; 255
     48e:	84 17       	cp	r24, r20
     490:	95 07       	cpc	r25, r21
     492:	19 f4       	brne	.+6      	; 0x49a <delay_ms+0x20>
     494:	08 95       	ret
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	27 e0       	ldi	r18, 0x07	; 7
     49c:	33 e0       	ldi	r19, 0x03	; 3
     49e:	f1 cf       	rjmp	.-30     	; 0x482 <delay_ms+0x8>

000004a0 <LCD_WriteCommand>:
     4a0:	5e 98       	cbi	0x0b, 6	; 11
     4a2:	88 b9       	out	0x08, r24	; 8
     4a4:	5f 9a       	sbi	0x0b, 7	; 11
     4a6:	00 00       	nop
     4a8:	5f 98       	cbi	0x0b, 7	; 11
     4aa:	84 e0       	ldi	r24, 0x04	; 4
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	e5 cf       	rjmp	.-54     	; 0x47a <delay_ms>
     4b0:	08 95       	ret

000004b2 <LCD_ClearScreen>:
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	f5 cf       	rjmp	.-22     	; 0x4a0 <LCD_WriteCommand>
     4b6:	08 95       	ret

000004b8 <LCD_init>:
     4b8:	84 e6       	ldi	r24, 0x64	; 100
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	de df       	rcall	.-68     	; 0x47a <delay_ms>
     4be:	88 e3       	ldi	r24, 0x38	; 56
     4c0:	ef df       	rcall	.-34     	; 0x4a0 <LCD_WriteCommand>
     4c2:	86 e0       	ldi	r24, 0x06	; 6
     4c4:	ed df       	rcall	.-38     	; 0x4a0 <LCD_WriteCommand>
     4c6:	8f e0       	ldi	r24, 0x0F	; 15
     4c8:	eb df       	rcall	.-42     	; 0x4a0 <LCD_WriteCommand>
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	e9 df       	rcall	.-46     	; 0x4a0 <LCD_WriteCommand>
     4ce:	8a e0       	ldi	r24, 0x0A	; 10
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	d3 cf       	rjmp	.-90     	; 0x47a <delay_ms>
     4d4:	08 95       	ret

000004d6 <LCD_WriteData>:
     4d6:	5e 9a       	sbi	0x0b, 6	; 11
     4d8:	88 b9       	out	0x08, r24	; 8
     4da:	5f 9a       	sbi	0x0b, 7	; 11
     4dc:	00 00       	nop
     4de:	5f 98       	cbi	0x0b, 7	; 11
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	ca cf       	rjmp	.-108    	; 0x47a <delay_ms>
     4e6:	08 95       	ret

000004e8 <LCD_Cursor>:
     4e8:	81 31       	cpi	r24, 0x11	; 17
     4ea:	18 f4       	brcc	.+6      	; 0x4f2 <LCD_Cursor+0xa>
     4ec:	81 58       	subi	r24, 0x81	; 129
     4ee:	d8 cf       	rjmp	.-80     	; 0x4a0 <LCD_WriteCommand>
     4f0:	08 95       	ret
     4f2:	81 55       	subi	r24, 0x51	; 81
     4f4:	d5 cf       	rjmp	.-86     	; 0x4a0 <LCD_WriteCommand>
     4f6:	08 95       	ret

000004f8 <LCD_DisplayString>:
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	18 2f       	mov	r17, r24
     502:	eb 01       	movw	r28, r22
     504:	d6 df       	rcall	.-84     	; 0x4b2 <LCD_ClearScreen>
     506:	88 81       	ld	r24, Y
     508:	88 23       	and	r24, r24
     50a:	51 f0       	breq	.+20     	; 0x520 <LCD_DisplayString+0x28>
     50c:	01 e0       	ldi	r16, 0x01	; 1
     50e:	01 0f       	add	r16, r17
     510:	81 2f       	mov	r24, r17
     512:	ea df       	rcall	.-44     	; 0x4e8 <LCD_Cursor>
     514:	89 91       	ld	r24, Y+
     516:	df df       	rcall	.-66     	; 0x4d6 <LCD_WriteData>
     518:	10 2f       	mov	r17, r16
     51a:	88 81       	ld	r24, Y
     51c:	81 11       	cpse	r24, r1
     51e:	f6 cf       	rjmp	.-20     	; 0x50c <LCD_DisplayString+0x14>
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	08 95       	ret

0000052a <initServo>:
     52a:	e0 e8       	ldi	r30, 0x80	; 128
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	82 6c       	ori	r24, 0xC2	; 194
     532:	80 83       	st	Z, r24
     534:	e1 e8       	ldi	r30, 0x81	; 129
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	88 61       	ori	r24, 0x18	; 24
     53c:	80 83       	st	Z, r24
     53e:	8f e1       	ldi	r24, 0x1F	; 31
     540:	9e e4       	ldi	r25, 0x4E	; 78
     542:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     546:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     54a:	08 95       	ret

0000054c <servo>:
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	8c 01       	movw	r16, r24
     55a:	eb 01       	movw	r28, r22
     55c:	7a 01       	movw	r14, r20
     55e:	e6 e8       	ldi	r30, 0x86	; 134
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	8f e1       	ldi	r24, 0x1F	; 31
     564:	9e e4       	ldi	r25, 0x4E	; 78
     566:	91 83       	std	Z+1, r25	; 0x01
     568:	80 83       	st	Z, r24
     56a:	91 83       	std	Z+1, r25	; 0x01
     56c:	80 83       	st	Z, r24
     56e:	84 e6       	ldi	r24, 0x64	; 100
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	83 df       	rcall	.-250    	; 0x47a <delay_ms>
     574:	c2 30       	cpi	r28, 0x02	; 2
     576:	d1 05       	cpc	r29, r1
     578:	21 f5       	brne	.+72     	; 0x5c2 <servo+0x76>
     57a:	05 30       	cpi	r16, 0x05	; 5
     57c:	11 05       	cpc	r17, r1
     57e:	71 f4       	brne	.+28     	; 0x59c <servo+0x50>
     580:	84 e6       	ldi	r24, 0x64	; 100
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	7a df       	rcall	.-268    	; 0x47a <delay_ms>
     586:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     58a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     58e:	81 56       	subi	r24, 0x61	; 97
     590:	93 40       	sbci	r25, 0x03	; 3
     592:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     596:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     59a:	38 c0       	rjmp	.+112    	; 0x60c <servo+0xc0>
     59c:	04 30       	cpi	r16, 0x04	; 4
     59e:	11 05       	cpc	r17, r1
     5a0:	a9 f5       	brne	.+106    	; 0x60c <servo+0xc0>
     5a2:	84 e6       	ldi	r24, 0x64	; 100
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	69 df       	rcall	.-302    	; 0x47a <delay_ms>
     5a8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     5ac:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5b0:	81 56       	subi	r24, 0x61	; 97
     5b2:	93 40       	sbci	r25, 0x03	; 3
     5b4:	e8 0e       	add	r14, r24
     5b6:	f9 1e       	adc	r15, r25
     5b8:	f0 92 89 00 	sts	0x0089, r15	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5bc:	e0 92 88 00 	sts	0x0088, r14	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     5c0:	25 c0       	rjmp	.+74     	; 0x60c <servo+0xc0>
     5c2:	23 97       	sbiw	r28, 0x03	; 3
     5c4:	19 f5       	brne	.+70     	; 0x60c <servo+0xc0>
     5c6:	05 30       	cpi	r16, 0x05	; 5
     5c8:	11 05       	cpc	r17, r1
     5ca:	71 f4       	brne	.+28     	; 0x5e8 <servo+0x9c>
     5cc:	84 e6       	ldi	r24, 0x64	; 100
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	54 df       	rcall	.-344    	; 0x47a <delay_ms>
     5d2:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     5d6:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5da:	88 55       	subi	r24, 0x58	; 88
     5dc:	92 40       	sbci	r25, 0x02	; 2
     5de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     5e6:	12 c0       	rjmp	.+36     	; 0x60c <servo+0xc0>
     5e8:	04 30       	cpi	r16, 0x04	; 4
     5ea:	11 05       	cpc	r17, r1
     5ec:	79 f4       	brne	.+30     	; 0x60c <servo+0xc0>
     5ee:	84 e6       	ldi	r24, 0x64	; 100
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	43 df       	rcall	.-378    	; 0x47a <delay_ms>
     5f4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     5f8:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5fc:	88 55       	subi	r24, 0x58	; 88
     5fe:	92 40       	sbci	r25, 0x02	; 2
     600:	8e 19       	sub	r24, r14
     602:	9f 09       	sbc	r25, r15
     604:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     608:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	08 95       	ret

0000061a <PIR_Detect_Tick>:
}
void PIR_Detect_Tick(){
	tmpmotion += PINB & 0x04;
     61a:	23 b1       	in	r18, 0x03	; 3
     61c:	24 70       	andi	r18, 0x04	; 4
     61e:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <tmpmotion>
     622:	28 0f       	add	r18, r24
     624:	20 93 72 07 	sts	0x0772, r18	; 0x800772 <tmpmotion>
	detectcount++;
     628:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <detectcount>
     62c:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <detectcount+0x1>
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	90 93 71 07 	sts	0x0771, r25	; 0x800771 <detectcount+0x1>
     636:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <detectcount>
	if (detectcount >= 100){
     63a:	84 36       	cpi	r24, 0x64	; 100
     63c:	91 05       	cpc	r25, r1
     63e:	40 f0       	brcs	.+16     	; 0x650 <PIR_Detect_Tick+0x36>
		motionDetected = tmpmotion;
     640:	20 93 73 07 	sts	0x0773, r18	; 0x800773 <motionDetected>
		tmpmotion = 0;
     644:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <tmpmotion>
		detectcount = 0;
     648:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <detectcount+0x1>
     64c:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <detectcount>
     650:	08 95       	ret

00000652 <PIR_Detect_Task>:
enum PIR_Sensor {PIR_INIT} PIR_state, PIR_state2, PIR_state3;
void PIR_Init(){
	PIR_state = PIR_INIT;
}
void PIR_Detect_Init(){
	PIR_state2 = PIR_INIT;
     652:	10 92 d5 07 	sts	0x07D5, r1	; 0x8007d5 <PIR_state2>
{
	PIR_Detect_Init();
	for(;;)
	{
		PIR_Detect_Tick();
		vTaskDelay(10);
     656:	e1 df       	rcall	.-62     	; 0x61a <PIR_Detect_Tick>
     658:	8a e0       	ldi	r24, 0x0A	; 10
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	a2 d6       	rcall	.+3396   	; 0x13a2 <vTaskDelay>
     65e:	fb cf       	rjmp	.-10     	; 0x656 <PIR_Detect_Task+0x4>

00000660 <PIR_Tick>:
		tmpmotion = 0;
		detectcount = 0;
	}
}
void PIR_Tick(){
	if (motionDetected)
     660:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <motionDetected>
     664:	88 23       	and	r24, r24
     666:	29 f0       	breq	.+10     	; 0x672 <PIR_Tick+0x12>
		UART_Send_BlueTooth("Y",0);
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	8b e0       	ldi	r24, 0x0B	; 11
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	62 de       	rcall	.-828    	; 0x334 <UART_Send_BlueTooth>
     670:	04 c0       	rjmp	.+8      	; 0x67a <PIR_Tick+0x1a>
	else if (!motionDetected)
		UART_Send_BlueTooth("N",0);
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	8d e0       	ldi	r24, 0x0D	; 13
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	5d de       	rcall	.-838    	; 0x334 <UART_Send_BlueTooth>
	motionDetected = 0x00;
     67a:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <motionDetected>
     67e:	08 95       	ret

00000680 <PIRTask>:
void LCD_Init(){
	LCD_state = Display_INIT;
}
enum PIR_Sensor {PIR_INIT} PIR_state, PIR_state2, PIR_state3;
void PIR_Init(){
	PIR_state = PIR_INIT;
     680:	10 92 d3 07 	sts	0x07D3, r1	; 0x8007d3 <PIR_state>
{
	PIR_Init();
	for(;;)
	{
		PIR_Tick();
		vTaskDelay(1000);
     684:	ed df       	rcall	.-38     	; 0x660 <PIR_Tick>
     686:	88 ee       	ldi	r24, 0xE8	; 232
     688:	93 e0       	ldi	r25, 0x03	; 3
     68a:	8b d6       	rcall	.+3350   	; 0x13a2 <vTaskDelay>
     68c:	fb cf       	rjmp	.-10     	; 0x684 <PIRTask+0x4>

0000068e <InitLockTask_Tick>:
}

char attempt[4] = "";
int newDegree[3] = {0,0,0};
unsigned char invalid = 0x00;
void InitLockTask_Tick(){
     68e:	6f 92       	push	r6
     690:	7f 92       	push	r7
     692:	8f 92       	push	r8
     694:	9f 92       	push	r9
     696:	af 92       	push	r10
     698:	bf 92       	push	r11
     69a:	cf 92       	push	r12
     69c:	df 92       	push	r13
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
	unsigned char currentKey = GetKeypadKey();
     6a8:	df 93       	push	r29
     6aa:	99 de       	rcall	.-718    	; 0x3de <GetKeypadKey>

	switch(Keypad_state){
     6ac:	c8 2f       	mov	r28, r24
     6ae:	80 91 d4 07 	lds	r24, 0x07D4	; 0x8007d4 <Keypad_state>
     6b2:	82 30       	cpi	r24, 0x02	; 2
     6b4:	99 f0       	breq	.+38     	; 0x6dc <InitLockTask_Tick+0x4e>
     6b6:	28 f4       	brcc	.+10     	; 0x6c2 <InitLockTask_Tick+0x34>
     6b8:	88 23       	and	r24, r24
     6ba:	61 f0       	breq	.+24     	; 0x6d4 <InitLockTask_Tick+0x46>
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	71 f1       	breq	.+92     	; 0x71c <InitLockTask_Tick+0x8e>
     6c0:	b5 c1       	rjmp	.+874    	; 0xa2c <InitLockTask_Tick+0x39e>
     6c2:	84 30       	cpi	r24, 0x04	; 4
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <InitLockTask_Tick+0x3a>
     6c6:	18 c1       	rjmp	.+560    	; 0x8f8 <InitLockTask_Tick+0x26a>
     6c8:	08 f4       	brcc	.+2      	; 0x6cc <InitLockTask_Tick+0x3e>
     6ca:	84 c0       	rjmp	.+264    	; 0x7d4 <InitLockTask_Tick+0x146>
     6cc:	85 30       	cpi	r24, 0x05	; 5
     6ce:	09 f4       	brne	.+2      	; 0x6d2 <InitLockTask_Tick+0x44>
     6d0:	eb c0       	rjmp	.+470    	; 0x8a8 <InitLockTask_Tick+0x21a>
		case Keypad_INIT:
			Keypad_state = Keypad_Wait;
     6d2:	ac c1       	rjmp	.+856    	; 0xa2c <InitLockTask_Tick+0x39e>
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	80 93 d4 07 	sts	0x07D4, r24	; 0x8007d4 <Keypad_state>
		break;
		case Keypad_Wait:
			if (currentKey){
     6da:	a8 c1       	rjmp	.+848    	; 0xa2c <InitLockTask_Tick+0x39e>
     6dc:	cc 23       	and	r28, r28
				if (keypadCount == 0)
     6de:	d1 f0       	breq	.+52     	; 0x714 <InitLockTask_Tick+0x86>
     6e0:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <keypadCount>
					LCD_ClearScreen();
     6e4:	81 11       	cpse	r24, r1
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <InitLockTask_Tick+0x5c>
				if (currentKey == '#'){
     6e8:	e4 de       	rcall	.-568    	; 0x4b2 <LCD_ClearScreen>
     6ea:	c3 32       	cpi	r28, 0x23	; 35
					Keypad_state = Keypad_Change;
     6ec:	31 f4       	brne	.+12     	; 0x6fa <InitLockTask_Tick+0x6c>
     6ee:	83 e0       	ldi	r24, 0x03	; 3
					LCD_WriteData('#');
     6f0:	80 93 d4 07 	sts	0x07D4, r24	; 0x8007d4 <Keypad_state>
     6f4:	83 e2       	ldi	r24, 0x23	; 35
     6f6:	ef de       	rcall	.-546    	; 0x4d6 <LCD_WriteData>
				}
				else{
					attempt[keypadCount] = currentKey;
     6f8:	0d c0       	rjmp	.+26     	; 0x714 <InitLockTask_Tick+0x86>
     6fa:	e0 91 6f 07 	lds	r30, 0x076F	; 0x80076f <keypadCount>
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	e5 59       	subi	r30, 0x95	; 149
					LCD_WriteData('*');
     702:	f8 4f       	sbci	r31, 0xF8	; 248
     704:	c0 83       	st	Z, r28
     706:	8a e2       	ldi	r24, 0x2A	; 42
					Keypad_state = Keypad_Password;
     708:	e6 de       	rcall	.-564    	; 0x4d6 <LCD_WriteData>
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	80 93 d4 07 	sts	0x07D4, r24	; 0x8007d4 <Keypad_state>
				}
			}
			while (GetKeypadKey()){asm("nop");}
     710:	01 c0       	rjmp	.+2      	; 0x714 <InitLockTask_Tick+0x86>
     712:	00 00       	nop
     714:	64 de       	rcall	.-824    	; 0x3de <GetKeypadKey>
     716:	81 11       	cpse	r24, r1
     718:	fc cf       	rjmp	.-8      	; 0x712 <InitLockTask_Tick+0x84>
		break;
		case Keypad_Password:
			if (currentKey){
     71a:	88 c1       	rjmp	.+784    	; 0xa2c <InitLockTask_Tick+0x39e>
     71c:	cc 23       	and	r28, r28
     71e:	09 f4       	brne	.+2      	; 0x722 <InitLockTask_Tick+0x94>
				keypadCount++;
     720:	85 c1       	rjmp	.+778    	; 0xa2c <InitLockTask_Tick+0x39e>
     722:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <keypadCount>
     726:	8f 5f       	subi	r24, 0xFF	; 255
				LCD_WriteData('*');
     728:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <keypadCount>
     72c:	8a e2       	ldi	r24, 0x2A	; 42
				attempt[keypadCount] = currentKey;
     72e:	d3 de       	rcall	.-602    	; 0x4d6 <LCD_WriteData>
     730:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <keypadCount>
     734:	e8 2f       	mov	r30, r24
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	e5 59       	subi	r30, 0x95	; 149
     73a:	f8 4f       	sbci	r31, 0xF8	; 248
				if (keypadCount >= 3){
     73c:	c0 83       	st	Z, r28
     73e:	83 30       	cpi	r24, 0x03	; 3
     740:	08 f4       	brcc	.+2      	; 0x744 <InitLockTask_Tick+0xb6>
					if (attempt[0] == password[0] && attempt[1] == password[1] 
     742:	44 c0       	rjmp	.+136    	; 0x7cc <InitLockTask_Tick+0x13e>
     744:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <attempt>
     748:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <password>
     74c:	98 13       	cpse	r25, r24
     74e:	27 c0       	rjmp	.+78     	; 0x79e <InitLockTask_Tick+0x110>
     750:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <attempt+0x1>
     754:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <password+0x1>
     758:	98 13       	cpse	r25, r24
					&& attempt[2] == password[2] && attempt[3] == password[3]){
     75a:	21 c0       	rjmp	.+66     	; 0x79e <InitLockTask_Tick+0x110>
     75c:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <attempt+0x2>
     760:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <password+0x2>
     764:	98 13       	cpse	r25, r24
     766:	1b c0       	rjmp	.+54     	; 0x79e <InitLockTask_Tick+0x110>
     768:	90 91 6e 07 	lds	r25, 0x076E	; 0x80076e <attempt+0x3>
     76c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <password+0x3>
     770:	98 13       	cpse	r25, r24
						if (currentState == lock){
     772:	15 c0       	rjmp	.+42     	; 0x79e <InitLockTask_Tick+0x110>
     774:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <currentState>
     778:	84 30       	cpi	r24, 0x04	; 4
							servo(open, clockdirection, degrees);
     77a:	59 f4       	brne	.+22     	; 0x792 <InitLockTask_Tick+0x104>
     77c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <degrees>
     780:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <degrees+0x1>
     784:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     788:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
						}
						delay_ms(100);
     78c:	85 e0       	ldi	r24, 0x05	; 5
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	dd de       	rcall	.-582    	; 0x54c <servo>
     792:	84 e6       	ldi	r24, 0x64	; 100
						currentState = open;
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	71 de       	rcall	.-798    	; 0x47a <delay_ms>
     798:	85 e0       	ldi	r24, 0x05	; 5
					}
					LCD_ClearScreen();
     79a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <currentState>
					keypadCount = 0;
     79e:	89 de       	rcall	.-750    	; 0x4b2 <LCD_ClearScreen>
     7a0:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <keypadCount>
					Keypad_state = Keypad_Wait;
     7a4:	82 e0       	ldi	r24, 0x02	; 2
     7a6:	80 93 d4 07 	sts	0x07D4, r24	; 0x8007d4 <Keypad_state>
					memset(attempt, 0, strlen(attempt));
     7aa:	eb e6       	ldi	r30, 0x6B	; 107
     7ac:	f7 e0       	ldi	r31, 0x07	; 7
     7ae:	01 90       	ld	r0, Z+
     7b0:	00 20       	and	r0, r0
     7b2:	e9 f7       	brne	.-6      	; 0x7ae <InitLockTask_Tick+0x120>
     7b4:	31 97       	sbiw	r30, 0x01	; 1
     7b6:	af 01       	movw	r20, r30
     7b8:	4b 56       	subi	r20, 0x6B	; 107
     7ba:	57 40       	sbci	r21, 0x07	; 7
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	8b e6       	ldi	r24, 0x6B	; 107
     7c2:	97 e0       	ldi	r25, 0x07	; 7
				}
			while (GetKeypadKey()){asm("nop");}
     7c4:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <memset>
     7c8:	01 c0       	rjmp	.+2      	; 0x7cc <InitLockTask_Tick+0x13e>
     7ca:	00 00       	nop
     7cc:	08 de       	rcall	.-1008   	; 0x3de <GetKeypadKey>
			}
		break;
		case Keypad_Change:
			if(currentKey){
     7ce:	81 11       	cpse	r24, r1
     7d0:	fc cf       	rjmp	.-8      	; 0x7ca <InitLockTask_Tick+0x13c>
     7d2:	2c c1       	rjmp	.+600    	; 0xa2c <InitLockTask_Tick+0x39e>
				LCD_WriteData(currentKey);
     7d4:	cc 23       	and	r28, r28
     7d6:	09 f4       	brne	.+2      	; 0x7da <InitLockTask_Tick+0x14c>
     7d8:	29 c1       	rjmp	.+594    	; 0xa2c <InitLockTask_Tick+0x39e>
				attempt[keypadCount] = currentKey;
     7da:	8c 2f       	mov	r24, r28
     7dc:	7c de       	rcall	.-776    	; 0x4d6 <LCD_WriteData>
     7de:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <keypadCount>
     7e2:	e8 2f       	mov	r30, r24
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	e5 59       	subi	r30, 0x95	; 149
				keypadCount++;
     7e8:	f8 4f       	sbci	r31, 0xF8	; 248
     7ea:	c0 83       	st	Z, r28
     7ec:	8f 5f       	subi	r24, 0xFF	; 255
				if (keypadCount == 4){
     7ee:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <keypadCount>
					if (attempt[0] == password[0] && attempt[1] == password[1]
     7f2:	84 30       	cpi	r24, 0x04	; 4
     7f4:	81 f5       	brne	.+96     	; 0x856 <InitLockTask_Tick+0x1c8>
     7f6:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <attempt>
     7fa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <password>
     7fe:	98 13       	cpse	r25, r24
     800:	15 c0       	rjmp	.+42     	; 0x82c <InitLockTask_Tick+0x19e>
     802:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <attempt+0x1>
     806:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <password+0x1>
					&& attempt[2] == password[2] && attempt[3] == password[3]){
     80a:	98 13       	cpse	r25, r24
     80c:	0f c0       	rjmp	.+30     	; 0x82c <InitLockTask_Tick+0x19e>
     80e:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <attempt+0x2>
     812:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <password+0x2>
     816:	98 13       	cpse	r25, r24
     818:	09 c0       	rjmp	.+18     	; 0x82c <InitLockTask_Tick+0x19e>
     81a:	90 91 6e 07 	lds	r25, 0x076E	; 0x80076e <attempt+0x3>
     81e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <password+0x3>
						LCD_WriteData('#');
     822:	98 13       	cpse	r25, r24
     824:	03 c0       	rjmp	.+6      	; 0x82c <InitLockTask_Tick+0x19e>
     826:	83 e2       	ldi	r24, 0x23	; 35
					}
					else {
						keypadCount = 0;
     828:	56 de       	rcall	.-852    	; 0x4d6 <LCD_WriteData>
     82a:	15 c0       	rjmp	.+42     	; 0x856 <InitLockTask_Tick+0x1c8>
						Keypad_state = Keypad_Wait;
     82c:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <keypadCount>
     830:	82 e0       	ldi	r24, 0x02	; 2
						memset(attempt, 0, strlen(attempt));
     832:	80 93 d4 07 	sts	0x07D4, r24	; 0x8007d4 <Keypad_state>
     836:	eb e6       	ldi	r30, 0x6B	; 107
     838:	f7 e0       	ldi	r31, 0x07	; 7
     83a:	01 90       	ld	r0, Z+
     83c:	00 20       	and	r0, r0
     83e:	e9 f7       	brne	.-6      	; 0x83a <InitLockTask_Tick+0x1ac>
     840:	31 97       	sbiw	r30, 0x01	; 1
     842:	af 01       	movw	r20, r30
     844:	4b 56       	subi	r20, 0x6B	; 107
     846:	57 40       	sbci	r21, 0x07	; 7
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	8b e6       	ldi	r24, 0x6B	; 107
						LCD_ClearScreen();
     84e:	97 e0       	ldi	r25, 0x07	; 7
     850:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <memset>
					}
				}
				if (keypadCount == 5 && currentKey != 'D' && currentKey != 'C')
     854:	2e de       	rcall	.-932    	; 0x4b2 <LCD_ClearScreen>
     856:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <keypadCount>
     85a:	85 30       	cpi	r24, 0x05	; 5
     85c:	41 f4       	brne	.+16     	; 0x86e <InitLockTask_Tick+0x1e0>
     85e:	8d eb       	ldi	r24, 0xBD	; 189
     860:	8c 0f       	add	r24, r28
     862:	82 30       	cpi	r24, 0x02	; 2
					password[keypadCount-5] = currentKey;
     864:	08 f4       	brcc	.+2      	; 0x868 <InitLockTask_Tick+0x1da>
     866:	d7 c0       	rjmp	.+430    	; 0xa16 <InitLockTask_Tick+0x388>
     868:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <password>
				if (keypadCount >= 6)
     86c:	d4 c0       	rjmp	.+424    	; 0xa16 <InitLockTask_Tick+0x388>
     86e:	86 30       	cpi	r24, 0x06	; 6
					password[keypadCount-5] = currentKey;
     870:	08 f4       	brcc	.+2      	; 0x874 <InitLockTask_Tick+0x1e6>
     872:	d8 c0       	rjmp	.+432    	; 0xa24 <InitLockTask_Tick+0x396>
     874:	e8 2f       	mov	r30, r24
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	e1 50       	subi	r30, 0x01	; 1
				if (keypadCount == 5 && currentKey == 'D')
					Keypad_state = Keypad_Degree;
     87a:	ff 4f       	sbci	r31, 0xFF	; 255
     87c:	c0 83       	st	Z, r28
				if (keypadCount == 5 && currentKey == 'C')
					Keypad_state = Keypad_Clock;			
     87e:	d2 c0       	rjmp	.+420    	; 0xa24 <InitLockTask_Tick+0x396>
     880:	84 e0       	ldi	r24, 0x04	; 4
     882:	80 93 d4 07 	sts	0x07D4, r24	; 0x8007d4 <Keypad_state>
				if (keypadCount == 8){
					keypadCount = 0;
     886:	0c c0       	rjmp	.+24     	; 0x8a0 <InitLockTask_Tick+0x212>
					Keypad_state = Keypad_Wait;
     888:	85 e0       	ldi	r24, 0x05	; 5
     88a:	80 93 d4 07 	sts	0x07D4, r24	; 0x8007d4 <Keypad_state>
					LCD_ClearScreen();
     88e:	08 c0       	rjmp	.+16     	; 0x8a0 <InitLockTask_Tick+0x212>
     890:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <keypadCount>
				}
				while(GetKeypadKey()){asm("nop");}
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	80 93 d4 07 	sts	0x07D4, r24	; 0x8007d4 <Keypad_state>
     89a:	0b de       	rcall	.-1002   	; 0x4b2 <LCD_ClearScreen>
			}
		break;
		case Keypad_Clock:
			if (currentKey){
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <InitLockTask_Tick+0x212>
     89e:	00 00       	nop
				LCD_ClearScreen();
     8a0:	9e dd       	rcall	.-1220   	; 0x3de <GetKeypadKey>
     8a2:	81 11       	cpse	r24, r1
				if (currentKey == '1'){
     8a4:	fc cf       	rjmp	.-8      	; 0x89e <InitLockTask_Tick+0x210>
     8a6:	c2 c0       	rjmp	.+388    	; 0xa2c <InitLockTask_Tick+0x39e>
					clockdirection = clockwise;
     8a8:	cc 23       	and	r28, r28
     8aa:	09 f4       	brne	.+2      	; 0x8ae <InitLockTask_Tick+0x220>
     8ac:	bf c0       	rjmp	.+382    	; 0xa2c <InitLockTask_Tick+0x39e>
     8ae:	01 de       	rcall	.-1022   	; 0x4b2 <LCD_ClearScreen>
     8b0:	c1 33       	cpi	r28, 0x31	; 49
					LCD_DisplayString(1, "Clockwise");
     8b2:	59 f4       	brne	.+22     	; 0x8ca <InitLockTask_Tick+0x23c>
     8b4:	82 e0       	ldi	r24, 0x02	; 2
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
				}
				if (currentKey == '2'){
     8bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					clockdirection = counterclockwise;
     8c0:	66 e1       	ldi	r22, 0x16	; 22
     8c2:	71 e0       	ldi	r23, 0x01	; 1
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	18 de       	rcall	.-976    	; 0x4f8 <LCD_DisplayString>
					LCD_DisplayString(1, "CounterClockwise");
     8c8:	0c c0       	rjmp	.+24     	; 0x8e2 <InitLockTask_Tick+0x254>
     8ca:	c2 33       	cpi	r28, 0x32	; 50
     8cc:	51 f4       	brne	.+20     	; 0x8e2 <InitLockTask_Tick+0x254>
     8ce:	83 e0       	ldi	r24, 0x03	; 3
				}
				keypadCount = 0;
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
				Keypad_state = Keypad_Wait;
     8d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				while(GetKeypadKey()){asm("nop");}
     8da:	6f e0       	ldi	r22, 0x0F	; 15
     8dc:	71 e0       	ldi	r23, 0x01	; 1
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	0b de       	rcall	.-1002   	; 0x4f8 <LCD_DisplayString>
     8e2:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <keypadCount>
     8e6:	82 e0       	ldi	r24, 0x02	; 2
			}
		break;
		case Keypad_Degree:
			if (currentKey){
     8e8:	80 93 d4 07 	sts	0x07D4, r24	; 0x8007d4 <Keypad_state>
     8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <InitLockTask_Tick+0x262>
				LCD_WriteData(currentKey);
     8ee:	00 00       	nop
     8f0:	76 dd       	rcall	.-1300   	; 0x3de <GetKeypadKey>
     8f2:	81 11       	cpse	r24, r1
				keypadCount++; //at 6 on start
     8f4:	fc cf       	rjmp	.-8      	; 0x8ee <InitLockTask_Tick+0x260>
     8f6:	9a c0       	rjmp	.+308    	; 0xa2c <InitLockTask_Tick+0x39e>
     8f8:	cc 23       	and	r28, r28
     8fa:	09 f4       	brne	.+2      	; 0x8fe <InitLockTask_Tick+0x270>
     8fc:	97 c0       	rjmp	.+302    	; 0xa2c <InitLockTask_Tick+0x39e>
				if (keypadCount == 6)
     8fe:	8c 2f       	mov	r24, r28
     900:	ea dd       	rcall	.-1068   	; 0x4d6 <LCD_WriteData>
					newDegree[2] = currentKey - '0';
     902:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <keypadCount>
     906:	8f 5f       	subi	r24, 0xFF	; 255
     908:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <keypadCount>
     90c:	86 30       	cpi	r24, 0x06	; 6
     90e:	39 f4       	brne	.+14     	; 0x91e <InitLockTask_Tick+0x290>
				if (keypadCount == 7)
     910:	d0 e0       	ldi	r29, 0x00	; 0
     912:	e0 97       	sbiw	r28, 0x30	; 48
					newDegree[1] = currentKey - '0';
     914:	d0 93 6a 07 	sts	0x076A, r29	; 0x80076a <newDegree+0x5>
     918:	c0 93 69 07 	sts	0x0769, r28	; 0x800769 <newDegree+0x4>
     91c:	78 c0       	rjmp	.+240    	; 0xa0e <InitLockTask_Tick+0x380>
     91e:	87 30       	cpi	r24, 0x07	; 7
     920:	39 f4       	brne	.+14     	; 0x930 <InitLockTask_Tick+0x2a2>
				if (keypadCount == 8){
     922:	d0 e0       	ldi	r29, 0x00	; 0
     924:	e0 97       	sbiw	r28, 0x30	; 48
     926:	d0 93 68 07 	sts	0x0768, r29	; 0x800768 <newDegree+0x3>
					newDegree[0] = currentKey - '0';
     92a:	c0 93 67 07 	sts	0x0767, r28	; 0x800767 <newDegree+0x2>
     92e:	6f c0       	rjmp	.+222    	; 0xa0e <InitLockTask_Tick+0x380>
     930:	88 30       	cpi	r24, 0x08	; 8
     932:	09 f0       	breq	.+2      	; 0x936 <InitLockTask_Tick+0x2a8>
     934:	6c c0       	rjmp	.+216    	; 0xa0e <InitLockTask_Tick+0x380>
     936:	d0 e0       	ldi	r29, 0x00	; 0
     938:	e0 97       	sbiw	r28, 0x30	; 48
     93a:	d0 93 66 07 	sts	0x0766, r29	; 0x800766 <newDegree+0x1>
     93e:	c0 93 65 07 	sts	0x0765, r28	; 0x800765 <newDegree>
					unsigned int tmp = 0;
					for (int i = 0; i < 3;i++){
     942:	70 90 64 07 	lds	r7, 0x0764	; 0x800764 <invalid>
						tmp += newDegree[i] * pow(10, i);
						if (newDegree[i] < 0 || newDegree[i] > 9)
							invalid = 1;
     946:	0f 2e       	mov	r0, r31
     948:	f5 e6       	ldi	r31, 0x65	; 101
					newDegree[1] = currentKey - '0';
				if (keypadCount == 8){
					newDegree[0] = currentKey - '0';
					unsigned int tmp = 0;
					for (int i = 0; i < 3;i++){
						tmp += newDegree[i] * pow(10, i);
     94a:	ef 2e       	mov	r14, r31
     94c:	f7 e0       	ldi	r31, 0x07	; 7
     94e:	ff 2e       	mov	r15, r31
     950:	f0 2d       	mov	r31, r0
     952:	c0 e0       	ldi	r28, 0x00	; 0
     954:	d0 e0       	ldi	r29, 0x00	; 0
     956:	c1 2c       	mov	r12, r1
     958:	d1 2c       	mov	r13, r1
     95a:	66 24       	eor	r6, r6
     95c:	63 94       	inc	r6
     95e:	f7 01       	movw	r30, r14
     960:	01 91       	ld	r16, Z+
     962:	11 91       	ld	r17, Z+
     964:	7f 01       	movw	r14, r30
     966:	be 01       	movw	r22, r28
     968:	0d 2e       	mov	r0, r29
     96a:	00 0c       	add	r0, r0
     96c:	88 0b       	sbc	r24, r24
     96e:	99 0b       	sbc	r25, r25
     970:	6c d6       	rcall	.+3288   	; 0x164a <__floatsisf>
     972:	9b 01       	movw	r18, r22
     974:	ac 01       	movw	r20, r24
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	80 e2       	ldi	r24, 0x20	; 32
     97c:	91 e4       	ldi	r25, 0x41	; 65
     97e:	54 d7       	rcall	.+3752   	; 0x1828 <pow>
     980:	4b 01       	movw	r8, r22
     982:	5c 01       	movw	r10, r24
     984:	b8 01       	movw	r22, r16
     986:	01 2e       	mov	r0, r17
     988:	00 0c       	add	r0, r0
     98a:	88 0b       	sbc	r24, r24
     98c:	99 0b       	sbc	r25, r25
     98e:	5d d6       	rcall	.+3258   	; 0x164a <__floatsisf>
     990:	a5 01       	movw	r20, r10
     992:	94 01       	movw	r18, r8
     994:	e6 d6       	rcall	.+3532   	; 0x1762 <__mulsf3>
     996:	4b 01       	movw	r8, r22
     998:	5c 01       	movw	r10, r24
     99a:	b6 01       	movw	r22, r12
     99c:	80 e0       	ldi	r24, 0x00	; 0
						if (newDegree[i] < 0 || newDegree[i] > 9)
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	52 d6       	rcall	.+3236   	; 0x1646 <__floatunsisf>
     9a2:	9b 01       	movw	r18, r22
				if (keypadCount == 7)
					newDegree[1] = currentKey - '0';
				if (keypadCount == 8){
					newDegree[0] = currentKey - '0';
					unsigned int tmp = 0;
					for (int i = 0; i < 3;i++){
     9a4:	ac 01       	movw	r20, r24
     9a6:	c5 01       	movw	r24, r10
     9a8:	b4 01       	movw	r22, r8
						tmp += newDegree[i] * pow(10, i);
						if (newDegree[i] < 0 || newDegree[i] > 9)
							invalid = 1;
					}
					if (tmp > 260)
     9aa:	bd d5       	rcall	.+2938   	; 0x1526 <__addsf3>
     9ac:	20 d6       	rcall	.+3136   	; 0x15ee <__fixunssfsi>
     9ae:	6b 01       	movw	r12, r22
     9b0:	0a 30       	cpi	r16, 0x0A	; 10
						invalid = 1;
     9b2:	11 05       	cpc	r17, r1
     9b4:	08 f0       	brcs	.+2      	; 0x9b8 <InitLockTask_Tick+0x32a>
     9b6:	76 2c       	mov	r7, r6
					LCD_ClearScreen();
     9b8:	21 96       	adiw	r28, 0x01	; 1
					if (!invalid){
     9ba:	c3 30       	cpi	r28, 0x03	; 3
     9bc:	d1 05       	cpc	r29, r1
     9be:	79 f6       	brne	.-98     	; 0x95e <InitLockTask_Tick+0x2d0>
						degrees = tmp;
     9c0:	70 92 64 07 	sts	0x0764, r7	; 0x800764 <invalid>
     9c4:	f5 e0       	ldi	r31, 0x05	; 5
     9c6:	cf 16       	cp	r12, r31
						LCD_WriteData(newDegree[2] + '0');
     9c8:	f1 e0       	ldi	r31, 0x01	; 1
     9ca:	df 06       	cpc	r13, r31
     9cc:	18 f0       	brcs	.+6      	; 0x9d4 <InitLockTask_Tick+0x346>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <invalid>
						LCD_WriteData(newDegree[1] + '0');
     9d4:	6e dd       	rcall	.-1316   	; 0x4b2 <LCD_ClearScreen>
     9d6:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <invalid>
     9da:	81 11       	cpse	r24, r1
						LCD_WriteData(newDegree[0] + '0');
     9dc:	0f c0       	rjmp	.+30     	; 0x9fc <InitLockTask_Tick+0x36e>
     9de:	d0 92 03 01 	sts	0x0103, r13	; 0x800103 <degrees+0x1>
     9e2:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <degrees>
					}
					invalid = 0;
     9e6:	c5 e6       	ldi	r28, 0x65	; 101
					keypadCount = 0;
     9e8:	d7 e0       	ldi	r29, 0x07	; 7
     9ea:	8c 81       	ldd	r24, Y+4	; 0x04
					Keypad_state = Keypad_Wait;
     9ec:	80 5d       	subi	r24, 0xD0	; 208
     9ee:	73 dd       	rcall	.-1306   	; 0x4d6 <LCD_WriteData>
     9f0:	8a 81       	ldd	r24, Y+2	; 0x02
     9f2:	80 5d       	subi	r24, 0xD0	; 208
				}		
				while(GetKeypadKey()){asm("nop");}		
     9f4:	70 dd       	rcall	.-1312   	; 0x4d6 <LCD_WriteData>
     9f6:	88 81       	ld	r24, Y
     9f8:	80 5d       	subi	r24, 0xD0	; 208
     9fa:	6d dd       	rcall	.-1318   	; 0x4d6 <LCD_WriteData>
     9fc:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <invalid>
				}
				if (keypadCount == 5 && currentKey != 'D' && currentKey != 'C')
					password[keypadCount-5] = currentKey;
				if (keypadCount >= 6)
					password[keypadCount-5] = currentKey;
				if (keypadCount == 5 && currentKey == 'D')
     a00:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <keypadCount>
     a04:	82 e0       	ldi	r24, 0x02	; 2
					Keypad_state = Keypad_Degree;
				if (keypadCount == 5 && currentKey == 'C')
     a06:	80 93 d4 07 	sts	0x07D4, r24	; 0x8007d4 <Keypad_state>
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <InitLockTask_Tick+0x380>
     a0c:	00 00       	nop
					Keypad_state = Keypad_Clock;			
				if (keypadCount == 8){
     a0e:	e7 dc       	rcall	.-1586   	; 0x3de <GetKeypadKey>
     a10:	81 11       	cpse	r24, r1
     a12:	fc cf       	rjmp	.-8      	; 0xa0c <InitLockTask_Tick+0x37e>
     a14:	0b c0       	rjmp	.+22     	; 0xa2c <InitLockTask_Tick+0x39e>
			}
		break;
		default:
		break;
	}
}
     a16:	c4 34       	cpi	r28, 0x44	; 68
     a18:	09 f4       	brne	.+2      	; 0xa1c <InitLockTask_Tick+0x38e>
     a1a:	32 cf       	rjmp	.-412    	; 0x880 <InitLockTask_Tick+0x1f2>
     a1c:	c3 34       	cpi	r28, 0x43	; 67
     a1e:	09 f0       	breq	.+2      	; 0xa22 <InitLockTask_Tick+0x394>
     a20:	3f cf       	rjmp	.-386    	; 0x8a0 <InitLockTask_Tick+0x212>
     a22:	32 cf       	rjmp	.-412    	; 0x888 <InitLockTask_Tick+0x1fa>
     a24:	88 30       	cpi	r24, 0x08	; 8
     a26:	09 f0       	breq	.+2      	; 0xa2a <InitLockTask_Tick+0x39c>
     a28:	3b cf       	rjmp	.-394    	; 0x8a0 <InitLockTask_Tick+0x212>
     a2a:	32 cf       	rjmp	.-412    	; 0x890 <InitLockTask_Tick+0x202>
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	df 90       	pop	r13
     a3a:	cf 90       	pop	r12
     a3c:	bf 90       	pop	r11
     a3e:	af 90       	pop	r10
     a40:	9f 90       	pop	r9
     a42:	8f 90       	pop	r8
     a44:	7f 90       	pop	r7
     a46:	6f 90       	pop	r6
     a48:	08 95       	ret

00000a4a <InitLockTask>:
void Test_Init(){
	Test_state = INIT;
}
enum Keypad {Keypad_INIT, Keypad_Password, Keypad_Wait, Keypad_Change, Keypad_Degree, Keypad_Clock} Keypad_state;
void InitLock_Init(){
	Keypad_state = Keypad_INIT;
     a4a:	10 92 d4 07 	sts	0x07D4, r1	; 0x8007d4 <Keypad_state>
{
	InitLock_Init();
	for(;;)
	{
		InitLockTask_Tick();
		vTaskDelay(25);
     a4e:	1f de       	rcall	.-962    	; 0x68e <InitLockTask_Tick>
     a50:	89 e1       	ldi	r24, 0x19	; 25
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a6 d4       	rcall	.+2380   	; 0x13a2 <vTaskDelay>
     a56:	fb cf       	rjmp	.-10     	; 0xa4e <InitLockTask+0x4>

00000a58 <Test_Tick>:
	while(!USART_HasReceived(1)){}
	unsigned char* temp = USART_Receive(1);
	
	LCD_DisplayString(1, temp);
	*/
	button1 = ~PINB & 0x01;
     a58:	83 b1       	in	r24, 0x03	; 3
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	28 2f       	mov	r18, r24
     a5e:	21 70       	andi	r18, 0x01	; 1
     a60:	80 fd       	sbrc	r24, 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	90 93 75 07 	sts	0x0775, r25	; 0x800775 <button1>
	button2 = ~PINB & 0x02;
     a68:	83 b1       	in	r24, 0x03	; 3
     a6a:	80 95       	com	r24
     a6c:	82 70       	andi	r24, 0x02	; 2
     a6e:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <button2>
	//Transitions
	switch(Test_state){
     a72:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <Test_state>
     a76:	91 30       	cpi	r25, 0x01	; 1
     a78:	39 f0       	breq	.+14     	; 0xa88 <Test_Tick+0x30>
     a7a:	18 f0       	brcs	.+6      	; 0xa82 <Test_Tick+0x2a>
     a7c:	92 30       	cpi	r25, 0x02	; 2
     a7e:	a9 f1       	breq	.+106    	; 0xaea <Test_Tick+0x92>
     a80:	08 95       	ret
		case INIT:
				Test_state = Wait_1;  
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	90 93 d6 07 	sts	0x07D6, r25	; 0x8007d6 <Test_state>
		case Wait_1:
			if (button1){
     a88:	21 11       	cpse	r18, r1
     a8a:	19 c0       	rjmp	.+50     	; 0xabe <Test_Tick+0x66>
				if (currentState != open)
     a8c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <currentState>
     a90:	85 30       	cpi	r24, 0x05	; 5
     a92:	59 f0       	breq	.+22     	; 0xaaa <Test_Tick+0x52>
					servo(open, clockdirection, degrees);
     a94:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <degrees>
     a98:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <degrees+0x1>
     a9c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     aa0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     aa4:	85 e0       	ldi	r24, 0x05	; 5
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	51 dd       	rcall	.-1374   	; 0x54c <servo>
				currentState = open;
     aaa:	85 e0       	ldi	r24, 0x05	; 5
     aac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <currentState>
				Test_state = Reset_1;
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <Test_state>
				pb = 0x01;			
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	80 93 d2 07 	sts	0x07D2, r24	; 0x8007d2 <pb>
     abc:	08 95       	ret
			}
			else if (button2){
     abe:	88 23       	and	r24, r24
     ac0:	e9 f0       	breq	.+58     	; 0xafc <Test_Tick+0xa4>
				servo(lock, clockdirection, degrees);
     ac2:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <degrees>
     ac6:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <degrees+0x1>
     aca:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     ace:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     ad2:	84 e0       	ldi	r24, 0x04	; 4
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	3a dd       	rcall	.-1420   	; 0x54c <servo>
				currentState = lock;
     ad8:	84 e0       	ldi	r24, 0x04	; 4
     ada:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <currentState>
				Test_state = Reset_1;
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <Test_state>
				pb = 0x02;
     ae4:	80 93 d2 07 	sts	0x07D2, r24	; 0x8007d2 <pb>
     ae8:	08 95       	ret
			}
		break;
		case Reset_1:
			if((!button1 && !button2)){
     aea:	22 23       	and	r18, r18
     aec:	39 f0       	breq	.+14     	; 0xafc <Test_Tick+0xa4>
     aee:	81 11       	cpse	r24, r1
     af0:	05 c0       	rjmp	.+10     	; 0xafc <Test_Tick+0xa4>
				Test_state = Wait_1;
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <Test_state>
				pb = 0x00;	
     af8:	10 92 d2 07 	sts	0x07D2, r1	; 0x8007d2 <pb>
     afc:	08 95       	ret

00000afe <TestSecTask>:
unsigned int clockdirection = clockwise;             //clockwise
char keypadCount = 0;

enum LEDState {INIT,Wait_1, Reset_1} Test_state;
void Test_Init(){
	Test_state = INIT;
     afe:	10 92 d6 07 	sts	0x07D6, r1	; 0x8007d6 <Test_state>
{
	Test_Init();
   for(;;) 
   { 	
	Test_Tick();
	vTaskDelay(10); 
     b02:	aa df       	rcall	.-172    	; 0xa58 <Test_Tick>
     b04:	8a e0       	ldi	r24, 0x0A	; 10
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	4c d4       	rcall	.+2200   	; 0x13a2 <vTaskDelay>
     b0a:	fb cf       	rjmp	.-10     	; 0xb02 <TestSecTask+0x4>

00000b0c <StartSecPulse>:
		vTaskDelay(10);
	}
}

void StartSecPulse(unsigned portBASE_TYPE Priority)
{
     b0c:	af 92       	push	r10
     b0e:	bf 92       	push	r11
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	cf 93       	push	r28
	xTaskCreate(TestSecTask, (signed portCHAR *)"TestSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     b1c:	a1 2c       	mov	r10, r1
     b1e:	b1 2c       	mov	r11, r1
     b20:	c1 2c       	mov	r12, r1
     b22:	d1 2c       	mov	r13, r1
     b24:	e1 2c       	mov	r14, r1
     b26:	f1 2c       	mov	r15, r1
     b28:	08 2f       	mov	r16, r24
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	45 e5       	ldi	r20, 0x55	; 85
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	60 e2       	ldi	r22, 0x20	; 32
     b34:	71 e0       	ldi	r23, 0x01	; 1
     b36:	8f e7       	ldi	r24, 0x7F	; 127
     b38:	95 e0       	ldi	r25, 0x05	; 5
     b3a:	cb d1       	rcall	.+918    	; 0xed2 <xTaskGenericCreate>
	xTaskCreate(PIR_Detect_Task, (signed portCHAR *)"PIR_Detect_Task", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	45 e5       	ldi	r20, 0x55	; 85
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	6c e2       	ldi	r22, 0x2C	; 44
     b46:	71 e0       	ldi	r23, 0x01	; 1
     b48:	89 e2       	ldi	r24, 0x29	; 41
     b4a:	93 e0       	ldi	r25, 0x03	; 3
     b4c:	c2 d1       	rcall	.+900    	; 0xed2 <xTaskGenericCreate>
	xTaskCreate(PIRTask, (signed portCHAR *)"PIRTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	45 e5       	ldi	r20, 0x55	; 85
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	6c e3       	ldi	r22, 0x3C	; 60
     b58:	71 e0       	ldi	r23, 0x01	; 1
     b5a:	80 e4       	ldi	r24, 0x40	; 64
     b5c:	93 e0       	ldi	r25, 0x03	; 3
     b5e:	b9 d1       	rcall	.+882    	; 0xed2 <xTaskGenericCreate>
	xTaskCreate(InitLockTask, (signed portCHAR *)"InitLockTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	45 e5       	ldi	r20, 0x55	; 85
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	64 e4       	ldi	r22, 0x44	; 68
     b6a:	71 e0       	ldi	r23, 0x01	; 1
     b6c:	85 e2       	ldi	r24, 0x25	; 37
     b6e:	95 e0       	ldi	r25, 0x05	; 5
     b70:	b0 d1       	rcall	.+864    	; 0xed2 <xTaskGenericCreate>
}	
     b72:	cf 91       	pop	r28
     b74:	0f 91       	pop	r16
     b76:	ff 90       	pop	r15
     b78:	ef 90       	pop	r14
     b7a:	df 90       	pop	r13
     b7c:	cf 90       	pop	r12
     b7e:	bf 90       	pop	r11
     b80:	af 90       	pop	r10
     b82:	08 95       	ret

00000b84 <main>:
 
 
int main(void) 
{ 
	DDRA = 0xF0;	PORTA = 0x0F;   //keypad
     b84:	80 ef       	ldi	r24, 0xF0	; 240
     b86:	81 b9       	out	0x01, r24	; 1
     b88:	8f e0       	ldi	r24, 0x0F	; 15
     b8a:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x00;	PORTB = 0xFF;	//output
     b8c:	14 b8       	out	0x04, r1	; 4
     b8e:	8f ef       	ldi	r24, 0xFF	; 255
     b90:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF;	PORTC = 0x00;	//output LCD
     b92:	87 b9       	out	0x07, r24	; 7
     b94:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xE3;	PORTD = 0x1C;	//output for bluetooth 0-1, input 2-4, output servo 5 LCD 67
     b96:	83 ee       	ldi	r24, 0xE3	; 227
     b98:	8a b9       	out	0x0a, r24	; 10
     b9a:	8c e1       	ldi	r24, 0x1C	; 28
     b9c:	8b b9       	out	0x0b, r24	; 11
	
	//SPI_MasterInit();
	//initBluetooth();
	initUSART(0);
     b9e:	80 e0       	ldi	r24, 0x00	; 0
	initUSART(1);
	initServo();
	LCD_init();	
     ba0:	95 db       	rcall	.-2262   	; 0x2cc <initUSART>
	
   //Start Tasks  
   StartSecPulse(1);
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	93 db       	rcall	.-2266   	; 0x2cc <initUSART>
     ba6:	c1 dc       	rcall	.-1662   	; 0x52a <initServo>
    //RunSchedular 
   vTaskStartScheduler(); 
     ba8:	87 dc       	rcall	.-1778   	; 0x4b8 <LCD_init>
     baa:	81 e0       	ldi	r24, 0x01	; 1
 
   return 0; 
}
     bac:	af df       	rcall	.-162    	; 0xb0c <StartSecPulse>
     bae:	84 d2       	rcall	.+1288   	; 0x10b8 <vTaskStartScheduler>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	08 95       	ret

00000bb6 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     bb6:	31 e1       	ldi	r19, 0x11	; 17
     bb8:	fc 01       	movw	r30, r24
     bba:	30 83       	st	Z, r19
     bbc:	31 97       	sbiw	r30, 0x01	; 1
     bbe:	22 e2       	ldi	r18, 0x22	; 34
     bc0:	20 83       	st	Z, r18
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	a3 e3       	ldi	r26, 0x33	; 51
     bc6:	a0 83       	st	Z, r26
     bc8:	31 97       	sbiw	r30, 0x01	; 1
     bca:	60 83       	st	Z, r22
     bcc:	31 97       	sbiw	r30, 0x01	; 1
     bce:	70 83       	st	Z, r23
     bd0:	31 97       	sbiw	r30, 0x01	; 1
     bd2:	10 82       	st	Z, r1
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	60 e8       	ldi	r22, 0x80	; 128
     bd8:	60 83       	st	Z, r22
     bda:	31 97       	sbiw	r30, 0x01	; 1
     bdc:	10 82       	st	Z, r1
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	62 e0       	ldi	r22, 0x02	; 2
     be2:	60 83       	st	Z, r22
     be4:	31 97       	sbiw	r30, 0x01	; 1
     be6:	63 e0       	ldi	r22, 0x03	; 3
     be8:	60 83       	st	Z, r22
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	64 e0       	ldi	r22, 0x04	; 4
     bee:	60 83       	st	Z, r22
     bf0:	31 97       	sbiw	r30, 0x01	; 1
     bf2:	65 e0       	ldi	r22, 0x05	; 5
     bf4:	60 83       	st	Z, r22
     bf6:	31 97       	sbiw	r30, 0x01	; 1
     bf8:	66 e0       	ldi	r22, 0x06	; 6
     bfa:	60 83       	st	Z, r22
     bfc:	31 97       	sbiw	r30, 0x01	; 1
     bfe:	67 e0       	ldi	r22, 0x07	; 7
     c00:	60 83       	st	Z, r22
     c02:	31 97       	sbiw	r30, 0x01	; 1
     c04:	68 e0       	ldi	r22, 0x08	; 8
     c06:	60 83       	st	Z, r22
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	69 e0       	ldi	r22, 0x09	; 9
     c0c:	60 83       	st	Z, r22
     c0e:	31 97       	sbiw	r30, 0x01	; 1
     c10:	60 e1       	ldi	r22, 0x10	; 16
     c12:	60 83       	st	Z, r22
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	30 83       	st	Z, r19
     c18:	31 97       	sbiw	r30, 0x01	; 1
     c1a:	32 e1       	ldi	r19, 0x12	; 18
     c1c:	30 83       	st	Z, r19
     c1e:	31 97       	sbiw	r30, 0x01	; 1
     c20:	33 e1       	ldi	r19, 0x13	; 19
     c22:	30 83       	st	Z, r19
     c24:	31 97       	sbiw	r30, 0x01	; 1
     c26:	34 e1       	ldi	r19, 0x14	; 20
     c28:	30 83       	st	Z, r19
     c2a:	31 97       	sbiw	r30, 0x01	; 1
     c2c:	35 e1       	ldi	r19, 0x15	; 21
     c2e:	30 83       	st	Z, r19
     c30:	31 97       	sbiw	r30, 0x01	; 1
     c32:	36 e1       	ldi	r19, 0x16	; 22
     c34:	30 83       	st	Z, r19
     c36:	31 97       	sbiw	r30, 0x01	; 1
     c38:	37 e1       	ldi	r19, 0x17	; 23
     c3a:	30 83       	st	Z, r19
     c3c:	31 97       	sbiw	r30, 0x01	; 1
     c3e:	38 e1       	ldi	r19, 0x18	; 24
     c40:	30 83       	st	Z, r19
     c42:	31 97       	sbiw	r30, 0x01	; 1
     c44:	39 e1       	ldi	r19, 0x19	; 25
     c46:	30 83       	st	Z, r19
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	30 e2       	ldi	r19, 0x20	; 32
     c4c:	30 83       	st	Z, r19
     c4e:	31 97       	sbiw	r30, 0x01	; 1
     c50:	31 e2       	ldi	r19, 0x21	; 33
     c52:	30 83       	st	Z, r19
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	20 83       	st	Z, r18
     c58:	31 97       	sbiw	r30, 0x01	; 1
     c5a:	23 e2       	ldi	r18, 0x23	; 35
     c5c:	20 83       	st	Z, r18
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	40 83       	st	Z, r20
     c62:	31 97       	sbiw	r30, 0x01	; 1
     c64:	50 83       	st	Z, r21
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	26 e2       	ldi	r18, 0x26	; 38
     c6a:	20 83       	st	Z, r18
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	27 e2       	ldi	r18, 0x27	; 39
     c70:	20 83       	st	Z, r18
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	28 e2       	ldi	r18, 0x28	; 40
     c76:	20 83       	st	Z, r18
     c78:	31 97       	sbiw	r30, 0x01	; 1
     c7a:	29 e2       	ldi	r18, 0x29	; 41
     c7c:	20 83       	st	Z, r18
     c7e:	31 97       	sbiw	r30, 0x01	; 1
     c80:	20 e3       	ldi	r18, 0x30	; 48
     c82:	20 83       	st	Z, r18
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	21 e3       	ldi	r18, 0x31	; 49
     c88:	20 83       	st	Z, r18
     c8a:	86 97       	sbiw	r24, 0x26	; 38
     c8c:	08 95       	ret

00000c8e <xPortStartScheduler>:
     c8e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c92:	8c e7       	ldi	r24, 0x7C	; 124
     c94:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     c98:	8b e0       	ldi	r24, 0x0B	; 11
     c9a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     c9e:	ef e6       	ldi	r30, 0x6F	; 111
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	82 60       	ori	r24, 0x02	; 2
     ca6:	80 83       	st	Z, r24
     ca8:	a0 91 ce 07 	lds	r26, 0x07CE	; 0x8007ce <pxCurrentTCB>
     cac:	b0 91 cf 07 	lds	r27, 0x07CF	; 0x8007cf <pxCurrentTCB+0x1>
     cb0:	cd 91       	ld	r28, X+
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	dd 91       	ld	r29, X+
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	ff 91       	pop	r31
     cba:	ef 91       	pop	r30
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	bf 91       	pop	r27
     cc2:	af 91       	pop	r26
     cc4:	9f 91       	pop	r25
     cc6:	8f 91       	pop	r24
     cc8:	7f 91       	pop	r23
     cca:	6f 91       	pop	r22
     ccc:	5f 91       	pop	r21
     cce:	4f 91       	pop	r20
     cd0:	3f 91       	pop	r19
     cd2:	2f 91       	pop	r18
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	df 90       	pop	r13
     cde:	cf 90       	pop	r12
     ce0:	bf 90       	pop	r11
     ce2:	af 90       	pop	r10
     ce4:	9f 90       	pop	r9
     ce6:	8f 90       	pop	r8
     ce8:	7f 90       	pop	r7
     cea:	6f 90       	pop	r6
     cec:	5f 90       	pop	r5
     cee:	4f 90       	pop	r4
     cf0:	3f 90       	pop	r3
     cf2:	2f 90       	pop	r2
     cf4:	1f 90       	pop	r1
     cf6:	0f 90       	pop	r0
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	0f 90       	pop	r0
     cfc:	08 95       	ret
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	08 95       	ret

00000d02 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d02:	0f 92       	push	r0
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	0f 92       	push	r0
     d0a:	1f 92       	push	r1
     d0c:	11 24       	eor	r1, r1
     d0e:	2f 92       	push	r2
     d10:	3f 92       	push	r3
     d12:	4f 92       	push	r4
     d14:	5f 92       	push	r5
     d16:	6f 92       	push	r6
     d18:	7f 92       	push	r7
     d1a:	8f 92       	push	r8
     d1c:	9f 92       	push	r9
     d1e:	af 92       	push	r10
     d20:	bf 92       	push	r11
     d22:	cf 92       	push	r12
     d24:	df 92       	push	r13
     d26:	ef 92       	push	r14
     d28:	ff 92       	push	r15
     d2a:	0f 93       	push	r16
     d2c:	1f 93       	push	r17
     d2e:	2f 93       	push	r18
     d30:	3f 93       	push	r19
     d32:	4f 93       	push	r20
     d34:	5f 93       	push	r21
     d36:	6f 93       	push	r22
     d38:	7f 93       	push	r23
     d3a:	8f 93       	push	r24
     d3c:	9f 93       	push	r25
     d3e:	af 93       	push	r26
     d40:	bf 93       	push	r27
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
     d4a:	a0 91 ce 07 	lds	r26, 0x07CE	; 0x8007ce <pxCurrentTCB>
     d4e:	b0 91 cf 07 	lds	r27, 0x07CF	; 0x8007cf <pxCurrentTCB+0x1>
     d52:	0d b6       	in	r0, 0x3d	; 61
     d54:	0d 92       	st	X+, r0
     d56:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
     d58:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
     d5a:	78 d3       	rcall	.+1776   	; 0x144c <vTaskSwitchContext>
     d5c:	a0 91 ce 07 	lds	r26, 0x07CE	; 0x8007ce <pxCurrentTCB>
     d60:	b0 91 cf 07 	lds	r27, 0x07CF	; 0x8007cf <pxCurrentTCB+0x1>
     d64:	cd 91       	ld	r28, X+
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	dd 91       	ld	r29, X+
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	ff 91       	pop	r31
     d6e:	ef 91       	pop	r30
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	bf 91       	pop	r27
     d76:	af 91       	pop	r26
     d78:	9f 91       	pop	r25
     d7a:	8f 91       	pop	r24
     d7c:	7f 91       	pop	r23
     d7e:	6f 91       	pop	r22
     d80:	5f 91       	pop	r21
     d82:	4f 91       	pop	r20
     d84:	3f 91       	pop	r19
     d86:	2f 91       	pop	r18
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	ff 90       	pop	r15
     d8e:	ef 90       	pop	r14
     d90:	df 90       	pop	r13
     d92:	cf 90       	pop	r12
     d94:	bf 90       	pop	r11
     d96:	af 90       	pop	r10
     d98:	9f 90       	pop	r9
     d9a:	8f 90       	pop	r8
     d9c:	7f 90       	pop	r7
     d9e:	6f 90       	pop	r6
     da0:	5f 90       	pop	r5
     da2:	4f 90       	pop	r4
     da4:	3f 90       	pop	r3
     da6:	2f 90       	pop	r2
     da8:	1f 90       	pop	r1
     daa:	0f 90       	pop	r0
     dac:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
     dae:	0f 90       	pop	r0
     db0:	08 95       	ret

00000db2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     db2:	0f 92       	push	r0
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	0f 92       	push	r0
     dba:	1f 92       	push	r1
     dbc:	11 24       	eor	r1, r1
     dbe:	2f 92       	push	r2
     dc0:	3f 92       	push	r3
     dc2:	4f 92       	push	r4
     dc4:	5f 92       	push	r5
     dc6:	6f 92       	push	r6
     dc8:	7f 92       	push	r7
     dca:	8f 92       	push	r8
     dcc:	9f 92       	push	r9
     dce:	af 92       	push	r10
     dd0:	bf 92       	push	r11
     dd2:	cf 92       	push	r12
     dd4:	df 92       	push	r13
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	2f 93       	push	r18
     de0:	3f 93       	push	r19
     de2:	4f 93       	push	r20
     de4:	5f 93       	push	r21
     de6:	6f 93       	push	r22
     de8:	7f 93       	push	r23
     dea:	8f 93       	push	r24
     dec:	9f 93       	push	r25
     dee:	af 93       	push	r26
     df0:	bf 93       	push	r27
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	ef 93       	push	r30
     df8:	ff 93       	push	r31
     dfa:	a0 91 ce 07 	lds	r26, 0x07CE	; 0x8007ce <pxCurrentTCB>
     dfe:	b0 91 cf 07 	lds	r27, 0x07CF	; 0x8007cf <pxCurrentTCB+0x1>
     e02:	0d b6       	in	r0, 0x3d	; 61
     e04:	0d 92       	st	X+, r0
     e06:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
     e08:	0d 92       	st	X+, r0
     e0a:	85 d1       	rcall	.+778    	; 0x1116 <vTaskIncrementTick>
	portRESTORE_CONTEXT();
     e0c:	1f d3       	rcall	.+1598   	; 0x144c <vTaskSwitchContext>
     e0e:	a0 91 ce 07 	lds	r26, 0x07CE	; 0x8007ce <pxCurrentTCB>
     e12:	b0 91 cf 07 	lds	r27, 0x07CF	; 0x8007cf <pxCurrentTCB+0x1>
     e16:	cd 91       	ld	r28, X+
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	dd 91       	ld	r29, X+
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	ff 91       	pop	r31
     e20:	ef 91       	pop	r30
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	bf 91       	pop	r27
     e28:	af 91       	pop	r26
     e2a:	9f 91       	pop	r25
     e2c:	8f 91       	pop	r24
     e2e:	7f 91       	pop	r23
     e30:	6f 91       	pop	r22
     e32:	5f 91       	pop	r21
     e34:	4f 91       	pop	r20
     e36:	3f 91       	pop	r19
     e38:	2f 91       	pop	r18
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	cf 90       	pop	r12
     e46:	bf 90       	pop	r11
     e48:	af 90       	pop	r10
     e4a:	9f 90       	pop	r9
     e4c:	8f 90       	pop	r8
     e4e:	7f 90       	pop	r7
     e50:	6f 90       	pop	r6
     e52:	5f 90       	pop	r5
     e54:	4f 90       	pop	r4
     e56:	3f 90       	pop	r3
     e58:	2f 90       	pop	r2
     e5a:	1f 90       	pop	r1
     e5c:	0f 90       	pop	r0
     e5e:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
     e60:	0f 90       	pop	r0
     e62:	08 95       	ret

00000e64 <__vector_13>:
}
     e64:	a6 df       	rcall	.-180    	; 0xdb2 <vPortYieldFromTick>
     e66:	18 95       	reti

00000e68 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	ec 01       	movw	r28, r24
     e6e:	e0 91 ce 07 	lds	r30, 0x07CE	; 0x8007ce <pxCurrentTCB>
     e72:	f0 91 cf 07 	lds	r31, 0x07CF	; 0x8007cf <pxCurrentTCB+0x1>
     e76:	93 83       	std	Z+3, r25	; 0x03
     e78:	82 83       	std	Z+2, r24	; 0x02
     e7a:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <xTickCount>
     e7e:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <xTickCount+0x1>
     e82:	c8 17       	cp	r28, r24
     e84:	d9 07       	cpc	r29, r25
     e86:	60 f4       	brcc	.+24     	; 0xea0 <prvAddCurrentTaskToDelayedList+0x38>
     e88:	60 91 ce 07 	lds	r22, 0x07CE	; 0x8007ce <pxCurrentTCB>
     e8c:	70 91 cf 07 	lds	r23, 0x07CF	; 0x8007cf <pxCurrentTCB+0x1>
     e90:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <pxOverflowDelayedTaskList>
     e94:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <pxOverflowDelayedTaskList+0x1>
     e98:	6e 5f       	subi	r22, 0xFE	; 254
     e9a:	7f 4f       	sbci	r23, 0xFF	; 255
     e9c:	b6 d9       	rcall	.-3220   	; 0x20a <vListInsert>
     e9e:	16 c0       	rjmp	.+44     	; 0xecc <prvAddCurrentTaskToDelayedList+0x64>
     ea0:	60 91 ce 07 	lds	r22, 0x07CE	; 0x8007ce <pxCurrentTCB>
     ea4:	70 91 cf 07 	lds	r23, 0x07CF	; 0x8007cf <pxCurrentTCB+0x1>
     ea8:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <pxDelayedTaskList>
     eac:	90 91 97 07 	lds	r25, 0x0797	; 0x800797 <pxDelayedTaskList+0x1>
     eb0:	6e 5f       	subi	r22, 0xFE	; 254
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	aa d9       	rcall	.-3244   	; 0x20a <vListInsert>
     eb6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <xNextTaskUnblockTime>
     eba:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <xNextTaskUnblockTime+0x1>
     ebe:	c8 17       	cp	r28, r24
     ec0:	d9 07       	cpc	r29, r25
     ec2:	20 f4       	brcc	.+8      	; 0xecc <prvAddCurrentTaskToDelayedList+0x64>
     ec4:	d0 93 0a 01 	sts	0x010A, r29	; 0x80010a <xNextTaskUnblockTime+0x1>
     ec8:	c0 93 09 01 	sts	0x0109, r28	; 0x800109 <xNextTaskUnblockTime>
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <xTaskGenericCreate>:
     ed2:	4f 92       	push	r4
     ed4:	5f 92       	push	r5
     ed6:	6f 92       	push	r6
     ed8:	7f 92       	push	r7
     eda:	8f 92       	push	r8
     edc:	9f 92       	push	r9
     ede:	af 92       	push	r10
     ee0:	bf 92       	push	r11
     ee2:	cf 92       	push	r12
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	5c 01       	movw	r10, r24
     ef4:	4b 01       	movw	r8, r22
     ef6:	3a 01       	movw	r6, r20
     ef8:	29 01       	movw	r4, r18
     efa:	81 e2       	ldi	r24, 0x21	; 33
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	26 d9       	rcall	.-3508   	; 0x14c <pvPortMalloc>
     f00:	ec 01       	movw	r28, r24
     f02:	89 2b       	or	r24, r25
     f04:	09 f4       	brne	.+2      	; 0xf08 <xTaskGenericCreate+0x36>
     f06:	c6 c0       	rjmp	.+396    	; 0x1094 <xTaskGenericCreate+0x1c2>
     f08:	c1 14       	cp	r12, r1
     f0a:	d1 04       	cpc	r13, r1
     f0c:	09 f0       	breq	.+2      	; 0xf10 <xTaskGenericCreate+0x3e>
     f0e:	be c0       	rjmp	.+380    	; 0x108c <xTaskGenericCreate+0x1ba>
     f10:	c3 01       	movw	r24, r6
     f12:	1c d9       	rcall	.-3528   	; 0x14c <pvPortMalloc>
     f14:	98 8f       	std	Y+24, r25	; 0x18
     f16:	8f 8b       	std	Y+23, r24	; 0x17
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	19 f4       	brne	.+6      	; 0xf22 <xTaskGenericCreate+0x50>
     f1c:	ce 01       	movw	r24, r28
     f1e:	3b d9       	rcall	.-3466   	; 0x196 <vPortFree>
     f20:	b9 c0       	rjmp	.+370    	; 0x1094 <xTaskGenericCreate+0x1c2>
     f22:	a3 01       	movw	r20, r6
     f24:	65 ea       	ldi	r22, 0xA5	; 165
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	4c d6       	rcall	.+3224   	; 0x1bc2 <memset>
     f2a:	93 01       	movw	r18, r6
     f2c:	21 50       	subi	r18, 0x01	; 1
     f2e:	31 09       	sbc	r19, r1
     f30:	8f 89       	ldd	r24, Y+23	; 0x17
     f32:	98 8d       	ldd	r25, Y+24	; 0x18
     f34:	3c 01       	movw	r6, r24
     f36:	62 0e       	add	r6, r18
     f38:	73 1e       	adc	r7, r19
     f3a:	48 e0       	ldi	r20, 0x08	; 8
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	b4 01       	movw	r22, r8
     f40:	ce 01       	movw	r24, r28
     f42:	49 96       	adiw	r24, 0x19	; 25
     f44:	45 d6       	rcall	.+3210   	; 0x1bd0 <strncpy>
     f46:	18 a2       	std	Y+32, r1	; 0x20
     f48:	10 2f       	mov	r17, r16
     f4a:	04 30       	cpi	r16, 0x04	; 4
     f4c:	08 f0       	brcs	.+2      	; 0xf50 <xTaskGenericCreate+0x7e>
     f4e:	13 e0       	ldi	r17, 0x03	; 3
     f50:	1e 8b       	std	Y+22, r17	; 0x16
     f52:	6e 01       	movw	r12, r28
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	c8 0e       	add	r12, r24
     f58:	d1 1c       	adc	r13, r1
     f5a:	c6 01       	movw	r24, r12
     f5c:	2b d9       	rcall	.-3498   	; 0x1b4 <vListInitialiseItem>
     f5e:	ce 01       	movw	r24, r28
     f60:	0c 96       	adiw	r24, 0x0c	; 12
     f62:	28 d9       	rcall	.-3504   	; 0x1b4 <vListInitialiseItem>
     f64:	d9 87       	std	Y+9, r29	; 0x09
     f66:	c8 87       	std	Y+8, r28	; 0x08
     f68:	84 e0       	ldi	r24, 0x04	; 4
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	81 1b       	sub	r24, r17
     f6e:	91 09       	sbc	r25, r1
     f70:	9d 87       	std	Y+13, r25	; 0x0d
     f72:	8c 87       	std	Y+12, r24	; 0x0c
     f74:	db 8b       	std	Y+19, r29	; 0x13
     f76:	ca 8b       	std	Y+18, r28	; 0x12
     f78:	a2 01       	movw	r20, r4
     f7a:	b5 01       	movw	r22, r10
     f7c:	c3 01       	movw	r24, r6
     f7e:	1b de       	rcall	.-970    	; 0xbb6 <pxPortInitialiseStack>
     f80:	99 83       	std	Y+1, r25	; 0x01
     f82:	88 83       	st	Y, r24
     f84:	e1 14       	cp	r14, r1
     f86:	f1 04       	cpc	r15, r1
     f88:	19 f0       	breq	.+6      	; 0xf90 <xTaskGenericCreate+0xbe>
     f8a:	f7 01       	movw	r30, r14
     f8c:	d1 83       	std	Z+1, r29	; 0x01
     f8e:	c0 83       	st	Z, r28
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	0f 92       	push	r0
     f96:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <uxCurrentNumberOfTasks>
     f9a:	8f 5f       	subi	r24, 0xFF	; 255
     f9c:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <uxCurrentNumberOfTasks>
     fa0:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <pxCurrentTCB>
     fa4:	90 91 cf 07 	lds	r25, 0x07CF	; 0x8007cf <pxCurrentTCB+0x1>
     fa8:	89 2b       	or	r24, r25
     faa:	69 f5       	brne	.+90     	; 0x1006 <xTaskGenericCreate+0x134>
     fac:	d0 93 cf 07 	sts	0x07CF, r29	; 0x8007cf <pxCurrentTCB+0x1>
     fb0:	c0 93 ce 07 	sts	0x07CE, r28	; 0x8007ce <pxCurrentTCB>
     fb4:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <uxCurrentNumberOfTasks>
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	a1 f5       	brne	.+104    	; 0x1024 <xTaskGenericCreate+0x152>
     fbc:	8a ea       	ldi	r24, 0xAA	; 170
     fbe:	97 e0       	ldi	r25, 0x07	; 7
     fc0:	eb d8       	rcall	.-3626   	; 0x198 <vListInitialise>
     fc2:	83 eb       	ldi	r24, 0xB3	; 179
     fc4:	97 e0       	ldi	r25, 0x07	; 7
     fc6:	e8 d8       	rcall	.-3632   	; 0x198 <vListInitialise>
     fc8:	8c eb       	ldi	r24, 0xBC	; 188
     fca:	97 e0       	ldi	r25, 0x07	; 7
     fcc:	e5 d8       	rcall	.-3638   	; 0x198 <vListInitialise>
     fce:	85 ec       	ldi	r24, 0xC5	; 197
     fd0:	97 e0       	ldi	r25, 0x07	; 7
     fd2:	e2 d8       	rcall	.-3644   	; 0x198 <vListInitialise>
     fd4:	81 ea       	ldi	r24, 0xA1	; 161
     fd6:	97 e0       	ldi	r25, 0x07	; 7
     fd8:	df d8       	rcall	.-3650   	; 0x198 <vListInitialise>
     fda:	88 e9       	ldi	r24, 0x98	; 152
     fdc:	97 e0       	ldi	r25, 0x07	; 7
     fde:	dc d8       	rcall	.-3656   	; 0x198 <vListInitialise>
     fe0:	8b e8       	ldi	r24, 0x8B	; 139
     fe2:	97 e0       	ldi	r25, 0x07	; 7
     fe4:	d9 d8       	rcall	.-3662   	; 0x198 <vListInitialise>
     fe6:	82 e8       	ldi	r24, 0x82	; 130
     fe8:	97 e0       	ldi	r25, 0x07	; 7
     fea:	d6 d8       	rcall	.-3668   	; 0x198 <vListInitialise>
     fec:	81 ea       	ldi	r24, 0xA1	; 161
     fee:	97 e0       	ldi	r25, 0x07	; 7
     ff0:	90 93 97 07 	sts	0x0797, r25	; 0x800797 <pxDelayedTaskList+0x1>
     ff4:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <pxDelayedTaskList>
     ff8:	88 e9       	ldi	r24, 0x98	; 152
     ffa:	97 e0       	ldi	r25, 0x07	; 7
     ffc:	90 93 95 07 	sts	0x0795, r25	; 0x800795 <pxOverflowDelayedTaskList+0x1>
    1000:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <pxOverflowDelayedTaskList>
    1004:	0f c0       	rjmp	.+30     	; 0x1024 <xTaskGenericCreate+0x152>
    1006:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <xSchedulerRunning>
    100a:	81 11       	cpse	r24, r1
    100c:	0b c0       	rjmp	.+22     	; 0x1024 <xTaskGenericCreate+0x152>
    100e:	e0 91 ce 07 	lds	r30, 0x07CE	; 0x8007ce <pxCurrentTCB>
    1012:	f0 91 cf 07 	lds	r31, 0x07CF	; 0x8007cf <pxCurrentTCB+0x1>
    1016:	86 89       	ldd	r24, Z+22	; 0x16
    1018:	08 17       	cp	r16, r24
    101a:	20 f0       	brcs	.+8      	; 0x1024 <xTaskGenericCreate+0x152>
    101c:	d0 93 cf 07 	sts	0x07CF, r29	; 0x8007cf <pxCurrentTCB+0x1>
    1020:	c0 93 ce 07 	sts	0x07CE, r28	; 0x8007ce <pxCurrentTCB>
    1024:	8e 89       	ldd	r24, Y+22	; 0x16
    1026:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <uxTopUsedPriority>
    102a:	98 17       	cp	r25, r24
    102c:	10 f4       	brcc	.+4      	; 0x1032 <xTaskGenericCreate+0x160>
    102e:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <uxTopUsedPriority>
    1032:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <uxTaskNumber>
    1036:	9f 5f       	subi	r25, 0xFF	; 255
    1038:	90 93 76 07 	sts	0x0776, r25	; 0x800776 <uxTaskNumber>
    103c:	90 91 7c 07 	lds	r25, 0x077C	; 0x80077c <uxTopReadyPriority>
    1040:	98 17       	cp	r25, r24
    1042:	10 f4       	brcc	.+4      	; 0x1048 <xTaskGenericCreate+0x176>
    1044:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <uxTopReadyPriority>
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	9c 01       	movw	r18, r24
    104c:	22 0f       	add	r18, r18
    104e:	33 1f       	adc	r19, r19
    1050:	22 0f       	add	r18, r18
    1052:	33 1f       	adc	r19, r19
    1054:	22 0f       	add	r18, r18
    1056:	33 1f       	adc	r19, r19
    1058:	82 0f       	add	r24, r18
    105a:	93 1f       	adc	r25, r19
    105c:	b6 01       	movw	r22, r12
    105e:	86 55       	subi	r24, 0x56	; 86
    1060:	98 4f       	sbci	r25, 0xF8	; 248
    1062:	ac d8       	rcall	.-3752   	; 0x1bc <vListInsertEnd>
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <xSchedulerRunning>
    106c:	88 23       	and	r24, r24
    106e:	51 f0       	breq	.+20     	; 0x1084 <xTaskGenericCreate+0x1b2>
    1070:	e0 91 ce 07 	lds	r30, 0x07CE	; 0x8007ce <pxCurrentTCB>
    1074:	f0 91 cf 07 	lds	r31, 0x07CF	; 0x8007cf <pxCurrentTCB+0x1>
    1078:	86 89       	ldd	r24, Z+22	; 0x16
    107a:	80 17       	cp	r24, r16
    107c:	28 f4       	brcc	.+10     	; 0x1088 <xTaskGenericCreate+0x1b6>
    107e:	41 de       	rcall	.-894    	; 0xd02 <vPortYield>
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	09 c0       	rjmp	.+18     	; 0x1096 <xTaskGenericCreate+0x1c4>
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	07 c0       	rjmp	.+14     	; 0x1096 <xTaskGenericCreate+0x1c4>
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	05 c0       	rjmp	.+10     	; 0x1096 <xTaskGenericCreate+0x1c4>
    108c:	d8 8e       	std	Y+24, r13	; 0x18
    108e:	cf 8a       	std	Y+23, r12	; 0x17
    1090:	c6 01       	movw	r24, r12
    1092:	47 cf       	rjmp	.-370    	; 0xf22 <xTaskGenericCreate+0x50>
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	ff 90       	pop	r15
    10a0:	ef 90       	pop	r14
    10a2:	df 90       	pop	r13
    10a4:	cf 90       	pop	r12
    10a6:	bf 90       	pop	r11
    10a8:	af 90       	pop	r10
    10aa:	9f 90       	pop	r9
    10ac:	8f 90       	pop	r8
    10ae:	7f 90       	pop	r7
    10b0:	6f 90       	pop	r6
    10b2:	5f 90       	pop	r5
    10b4:	4f 90       	pop	r4
    10b6:	08 95       	ret

000010b8 <vTaskStartScheduler>:
    10b8:	af 92       	push	r10
    10ba:	bf 92       	push	r11
    10bc:	cf 92       	push	r12
    10be:	df 92       	push	r13
    10c0:	ef 92       	push	r14
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	a1 2c       	mov	r10, r1
    10c8:	b1 2c       	mov	r11, r1
    10ca:	c1 2c       	mov	r12, r1
    10cc:	d1 2c       	mov	r13, r1
    10ce:	e1 2c       	mov	r14, r1
    10d0:	f1 2c       	mov	r15, r1
    10d2:	00 e0       	ldi	r16, 0x00	; 0
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	45 e5       	ldi	r20, 0x55	; 85
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	61 e8       	ldi	r22, 0x81	; 129
    10de:	71 e0       	ldi	r23, 0x01	; 1
    10e0:	8d ee       	ldi	r24, 0xED	; 237
    10e2:	99 e0       	ldi	r25, 0x09	; 9
    10e4:	f6 de       	rcall	.-532    	; 0xed2 <xTaskGenericCreate>
    10e6:	81 30       	cpi	r24, 0x01	; 1
    10e8:	41 f4       	brne	.+16     	; 0x10fa <vTaskStartScheduler+0x42>
    10ea:	f8 94       	cli
    10ec:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <xSchedulerRunning>
    10f0:	10 92 7f 07 	sts	0x077F, r1	; 0x80077f <xTickCount+0x1>
    10f4:	10 92 7e 07 	sts	0x077E, r1	; 0x80077e <xTickCount>
    10f8:	ca dd       	rcall	.-1132   	; 0xc8e <xPortStartScheduler>
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	df 90       	pop	r13
    1102:	cf 90       	pop	r12
    1104:	bf 90       	pop	r11
    1106:	af 90       	pop	r10
    1108:	08 95       	ret

0000110a <vTaskSuspendAll>:
    110a:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <uxSchedulerSuspended>
    110e:	8f 5f       	subi	r24, 0xFF	; 255
    1110:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <uxSchedulerSuspended>
    1114:	08 95       	ret

00001116 <vTaskIncrementTick>:
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <uxSchedulerSuspended>
    1122:	81 11       	cpse	r24, r1
    1124:	b0 c0       	rjmp	.+352    	; 0x1286 <vTaskIncrementTick+0x170>
    1126:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <xTickCount>
    112a:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <xTickCount+0x1>
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <xTickCount+0x1>
    1134:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <xTickCount>
    1138:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <xTickCount>
    113c:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <xTickCount+0x1>
    1140:	89 2b       	or	r24, r25
    1142:	99 f5       	brne	.+102    	; 0x11aa <vTaskIncrementTick+0x94>
    1144:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <pxDelayedTaskList>
    1148:	90 91 97 07 	lds	r25, 0x0797	; 0x800797 <pxDelayedTaskList+0x1>
    114c:	20 91 94 07 	lds	r18, 0x0794	; 0x800794 <pxOverflowDelayedTaskList>
    1150:	30 91 95 07 	lds	r19, 0x0795	; 0x800795 <pxOverflowDelayedTaskList+0x1>
    1154:	30 93 97 07 	sts	0x0797, r19	; 0x800797 <pxDelayedTaskList+0x1>
    1158:	20 93 96 07 	sts	0x0796, r18	; 0x800796 <pxDelayedTaskList>
    115c:	90 93 95 07 	sts	0x0795, r25	; 0x800795 <pxOverflowDelayedTaskList+0x1>
    1160:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <pxOverflowDelayedTaskList>
    1164:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <xNumOfOverflows>
    1168:	8f 5f       	subi	r24, 0xFF	; 255
    116a:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <xNumOfOverflows>
    116e:	e0 91 96 07 	lds	r30, 0x0796	; 0x800796 <pxDelayedTaskList>
    1172:	f0 91 97 07 	lds	r31, 0x0797	; 0x800797 <pxDelayedTaskList+0x1>
    1176:	80 81       	ld	r24, Z
    1178:	81 11       	cpse	r24, r1
    117a:	07 c0       	rjmp	.+14     	; 0x118a <vTaskIncrementTick+0x74>
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	9f ef       	ldi	r25, 0xFF	; 255
    1180:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <xNextTaskUnblockTime+0x1>
    1184:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <xNextTaskUnblockTime>
    1188:	10 c0       	rjmp	.+32     	; 0x11aa <vTaskIncrementTick+0x94>
    118a:	e0 91 96 07 	lds	r30, 0x0796	; 0x800796 <pxDelayedTaskList>
    118e:	f0 91 97 07 	lds	r31, 0x0797	; 0x800797 <pxDelayedTaskList+0x1>
    1192:	05 80       	ldd	r0, Z+5	; 0x05
    1194:	f6 81       	ldd	r31, Z+6	; 0x06
    1196:	e0 2d       	mov	r30, r0
    1198:	06 80       	ldd	r0, Z+6	; 0x06
    119a:	f7 81       	ldd	r31, Z+7	; 0x07
    119c:	e0 2d       	mov	r30, r0
    119e:	82 81       	ldd	r24, Z+2	; 0x02
    11a0:	93 81       	ldd	r25, Z+3	; 0x03
    11a2:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <xNextTaskUnblockTime+0x1>
    11a6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <xNextTaskUnblockTime>
    11aa:	20 91 7e 07 	lds	r18, 0x077E	; 0x80077e <xTickCount>
    11ae:	30 91 7f 07 	lds	r19, 0x077F	; 0x80077f <xTickCount+0x1>
    11b2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <xNextTaskUnblockTime>
    11b6:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <xNextTaskUnblockTime+0x1>
    11ba:	28 17       	cp	r18, r24
    11bc:	39 07       	cpc	r19, r25
    11be:	08 f4       	brcc	.+2      	; 0x11c2 <vTaskIncrementTick+0xac>
    11c0:	67 c0       	rjmp	.+206    	; 0x1290 <vTaskIncrementTick+0x17a>
    11c2:	e0 91 96 07 	lds	r30, 0x0796	; 0x800796 <pxDelayedTaskList>
    11c6:	f0 91 97 07 	lds	r31, 0x0797	; 0x800797 <pxDelayedTaskList+0x1>
    11ca:	80 81       	ld	r24, Z
    11cc:	88 23       	and	r24, r24
    11ce:	99 f0       	breq	.+38     	; 0x11f6 <vTaskIncrementTick+0xe0>
    11d0:	e0 91 96 07 	lds	r30, 0x0796	; 0x800796 <pxDelayedTaskList>
    11d4:	f0 91 97 07 	lds	r31, 0x0797	; 0x800797 <pxDelayedTaskList+0x1>
    11d8:	05 80       	ldd	r0, Z+5	; 0x05
    11da:	f6 81       	ldd	r31, Z+6	; 0x06
    11dc:	e0 2d       	mov	r30, r0
    11de:	c6 81       	ldd	r28, Z+6	; 0x06
    11e0:	d7 81       	ldd	r29, Z+7	; 0x07
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	9b 81       	ldd	r25, Y+3	; 0x03
    11e6:	20 91 7e 07 	lds	r18, 0x077E	; 0x80077e <xTickCount>
    11ea:	30 91 7f 07 	lds	r19, 0x077F	; 0x80077f <xTickCount+0x1>
    11ee:	28 17       	cp	r18, r24
    11f0:	39 07       	cpc	r19, r25
    11f2:	f8 f4       	brcc	.+62     	; 0x1232 <vTaskIncrementTick+0x11c>
    11f4:	19 c0       	rjmp	.+50     	; 0x1228 <vTaskIncrementTick+0x112>
    11f6:	8f ef       	ldi	r24, 0xFF	; 255
    11f8:	9f ef       	ldi	r25, 0xFF	; 255
    11fa:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <xNextTaskUnblockTime+0x1>
    11fe:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <xNextTaskUnblockTime>
    1202:	46 c0       	rjmp	.+140    	; 0x1290 <vTaskIncrementTick+0x17a>
    1204:	e0 91 96 07 	lds	r30, 0x0796	; 0x800796 <pxDelayedTaskList>
    1208:	f0 91 97 07 	lds	r31, 0x0797	; 0x800797 <pxDelayedTaskList+0x1>
    120c:	05 80       	ldd	r0, Z+5	; 0x05
    120e:	f6 81       	ldd	r31, Z+6	; 0x06
    1210:	e0 2d       	mov	r30, r0
    1212:	c6 81       	ldd	r28, Z+6	; 0x06
    1214:	d7 81       	ldd	r29, Z+7	; 0x07
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	9b 81       	ldd	r25, Y+3	; 0x03
    121a:	20 91 7e 07 	lds	r18, 0x077E	; 0x80077e <xTickCount>
    121e:	30 91 7f 07 	lds	r19, 0x077F	; 0x80077f <xTickCount+0x1>
    1222:	28 17       	cp	r18, r24
    1224:	39 07       	cpc	r19, r25
    1226:	28 f4       	brcc	.+10     	; 0x1232 <vTaskIncrementTick+0x11c>
    1228:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <xNextTaskUnblockTime+0x1>
    122c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <xNextTaskUnblockTime>
    1230:	2f c0       	rjmp	.+94     	; 0x1290 <vTaskIncrementTick+0x17a>
    1232:	8e 01       	movw	r16, r28
    1234:	0e 5f       	subi	r16, 0xFE	; 254
    1236:	1f 4f       	sbci	r17, 0xFF	; 255
    1238:	c8 01       	movw	r24, r16
    123a:	22 d8       	rcall	.-4028   	; 0x280 <vListRemove>
    123c:	8c 89       	ldd	r24, Y+20	; 0x14
    123e:	9d 89       	ldd	r25, Y+21	; 0x15
    1240:	89 2b       	or	r24, r25
    1242:	19 f0       	breq	.+6      	; 0x124a <vTaskIncrementTick+0x134>
    1244:	ce 01       	movw	r24, r28
    1246:	0c 96       	adiw	r24, 0x0c	; 12
    1248:	1b d8       	rcall	.-4042   	; 0x280 <vListRemove>
    124a:	8e 89       	ldd	r24, Y+22	; 0x16
    124c:	90 91 7c 07 	lds	r25, 0x077C	; 0x80077c <uxTopReadyPriority>
    1250:	98 17       	cp	r25, r24
    1252:	10 f4       	brcc	.+4      	; 0x1258 <vTaskIncrementTick+0x142>
    1254:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <uxTopReadyPriority>
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9c 01       	movw	r18, r24
    125c:	22 0f       	add	r18, r18
    125e:	33 1f       	adc	r19, r19
    1260:	22 0f       	add	r18, r18
    1262:	33 1f       	adc	r19, r19
    1264:	22 0f       	add	r18, r18
    1266:	33 1f       	adc	r19, r19
    1268:	82 0f       	add	r24, r18
    126a:	93 1f       	adc	r25, r19
    126c:	b8 01       	movw	r22, r16
    126e:	86 55       	subi	r24, 0x56	; 86
    1270:	98 4f       	sbci	r25, 0xF8	; 248
    1272:	0e 94 de 00 	call	0x1bc	; 0x1bc <vListInsertEnd>
    1276:	e0 91 96 07 	lds	r30, 0x0796	; 0x800796 <pxDelayedTaskList>
    127a:	f0 91 97 07 	lds	r31, 0x0797	; 0x800797 <pxDelayedTaskList+0x1>
    127e:	80 81       	ld	r24, Z
    1280:	81 11       	cpse	r24, r1
    1282:	c0 cf       	rjmp	.-128    	; 0x1204 <vTaskIncrementTick+0xee>
    1284:	b8 cf       	rjmp	.-144    	; 0x11f6 <vTaskIncrementTick+0xe0>
    1286:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <uxMissedTicks>
    128a:	8f 5f       	subi	r24, 0xFF	; 255
    128c:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <uxMissedTicks>
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	08 95       	ret

0000129a <xTaskResumeAll>:
    129a:	cf 92       	push	r12
    129c:	df 92       	push	r13
    129e:	ef 92       	push	r14
    12a0:	ff 92       	push	r15
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	0f 92       	push	r0
    12b0:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <uxSchedulerSuspended>
    12b4:	81 50       	subi	r24, 0x01	; 1
    12b6:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <uxSchedulerSuspended>
    12ba:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <uxSchedulerSuspended>
    12be:	81 11       	cpse	r24, r1
    12c0:	62 c0       	rjmp	.+196    	; 0x1386 <xTaskResumeAll+0xec>
    12c2:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <uxCurrentNumberOfTasks>
    12c6:	81 11       	cpse	r24, r1
    12c8:	32 c0       	rjmp	.+100    	; 0x132e <xTaskResumeAll+0x94>
    12ca:	60 c0       	rjmp	.+192    	; 0x138c <xTaskResumeAll+0xf2>
    12cc:	d7 01       	movw	r26, r14
    12ce:	15 96       	adiw	r26, 0x05	; 5
    12d0:	ed 91       	ld	r30, X+
    12d2:	fc 91       	ld	r31, X
    12d4:	16 97       	sbiw	r26, 0x06	; 6
    12d6:	c6 81       	ldd	r28, Z+6	; 0x06
    12d8:	d7 81       	ldd	r29, Z+7	; 0x07
    12da:	ce 01       	movw	r24, r28
    12dc:	0c 96       	adiw	r24, 0x0c	; 12
    12de:	0e 94 40 01 	call	0x280	; 0x280 <vListRemove>
    12e2:	8e 01       	movw	r16, r28
    12e4:	0e 5f       	subi	r16, 0xFE	; 254
    12e6:	1f 4f       	sbci	r17, 0xFF	; 255
    12e8:	c8 01       	movw	r24, r16
    12ea:	0e 94 40 01 	call	0x280	; 0x280 <vListRemove>
    12ee:	8e 89       	ldd	r24, Y+22	; 0x16
    12f0:	90 91 7c 07 	lds	r25, 0x077C	; 0x80077c <uxTopReadyPriority>
    12f4:	98 17       	cp	r25, r24
    12f6:	10 f4       	brcc	.+4      	; 0x12fc <xTaskResumeAll+0x62>
    12f8:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <uxTopReadyPriority>
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9c 01       	movw	r18, r24
    1300:	22 0f       	add	r18, r18
    1302:	33 1f       	adc	r19, r19
    1304:	22 0f       	add	r18, r18
    1306:	33 1f       	adc	r19, r19
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	82 0f       	add	r24, r18
    130e:	93 1f       	adc	r25, r19
    1310:	b8 01       	movw	r22, r16
    1312:	86 55       	subi	r24, 0x56	; 86
    1314:	98 4f       	sbci	r25, 0xF8	; 248
    1316:	0e 94 de 00 	call	0x1bc	; 0x1bc <vListInsertEnd>
    131a:	e0 91 ce 07 	lds	r30, 0x07CE	; 0x8007ce <pxCurrentTCB>
    131e:	f0 91 cf 07 	lds	r31, 0x07CF	; 0x8007cf <pxCurrentTCB+0x1>
    1322:	9e 89       	ldd	r25, Y+22	; 0x16
    1324:	86 89       	ldd	r24, Z+22	; 0x16
    1326:	98 17       	cp	r25, r24
    1328:	58 f0       	brcs	.+22     	; 0x1340 <xTaskResumeAll+0xa6>
    132a:	dc 2c       	mov	r13, r12
    132c:	09 c0       	rjmp	.+18     	; 0x1340 <xTaskResumeAll+0xa6>
    132e:	d1 2c       	mov	r13, r1
    1330:	0f 2e       	mov	r0, r31
    1332:	fb e8       	ldi	r31, 0x8B	; 139
    1334:	ef 2e       	mov	r14, r31
    1336:	f7 e0       	ldi	r31, 0x07	; 7
    1338:	ff 2e       	mov	r15, r31
    133a:	f0 2d       	mov	r31, r0
    133c:	cc 24       	eor	r12, r12
    133e:	c3 94       	inc	r12
    1340:	f7 01       	movw	r30, r14
    1342:	80 81       	ld	r24, Z
    1344:	81 11       	cpse	r24, r1
    1346:	c2 cf       	rjmp	.-124    	; 0x12cc <xTaskResumeAll+0x32>
    1348:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <uxMissedTicks>
    134c:	88 23       	and	r24, r24
    134e:	79 f0       	breq	.+30     	; 0x136e <xTaskResumeAll+0xd4>
    1350:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <uxMissedTicks>
    1354:	88 23       	and	r24, r24
    1356:	91 f0       	breq	.+36     	; 0x137c <xTaskResumeAll+0xe2>
    1358:	de de       	rcall	.-580    	; 0x1116 <vTaskIncrementTick>
    135a:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <uxMissedTicks>
    135e:	81 50       	subi	r24, 0x01	; 1
    1360:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <uxMissedTicks>
    1364:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <uxMissedTicks>
    1368:	81 11       	cpse	r24, r1
    136a:	f6 cf       	rjmp	.-20     	; 0x1358 <xTaskResumeAll+0xbe>
    136c:	07 c0       	rjmp	.+14     	; 0x137c <xTaskResumeAll+0xe2>
    136e:	f1 e0       	ldi	r31, 0x01	; 1
    1370:	df 16       	cp	r13, r31
    1372:	21 f0       	breq	.+8      	; 0x137c <xTaskResumeAll+0xe2>
    1374:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <xMissedYield>
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	39 f4       	brne	.+14     	; 0x138a <xTaskResumeAll+0xf0>
    137c:	10 92 78 07 	sts	0x0778, r1	; 0x800778 <xMissedYield>
    1380:	c0 dc       	rcall	.-1664   	; 0xd02 <vPortYield>
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	03 c0       	rjmp	.+6      	; 0x138c <xTaskResumeAll+0xf2>
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	01 c0       	rjmp	.+2      	; 0x138c <xTaskResumeAll+0xf2>
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
    139a:	ef 90       	pop	r14
    139c:	df 90       	pop	r13
    139e:	cf 90       	pop	r12
    13a0:	08 95       	ret

000013a2 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    13a8:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
    13aa:	99 f0       	breq	.+38     	; 0x13d2 <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    13ac:	ae de       	rcall	.-676    	; 0x110a <vTaskSuspendAll>
    13ae:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <xTickCount>
    13b2:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <xTickCount+0x1>
    13b6:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    13b8:	d9 1f       	adc	r29, r25
    13ba:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <pxCurrentTCB>
    13be:	90 91 cf 07 	lds	r25, 0x07CF	; 0x8007cf <pxCurrentTCB+0x1>
    13c2:	02 96       	adiw	r24, 0x02	; 2
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    13c4:	0e 94 40 01 	call	0x280	; 0x280 <vListRemove>
			xAlreadyYielded = xTaskResumeAll();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    13c8:	ce 01       	movw	r24, r28
    13ca:	4e dd       	rcall	.-1380   	; 0xe68 <prvAddCurrentTaskToDelayedList>
		{
			portYIELD_WITHIN_API();
    13cc:	66 df       	rcall	.-308    	; 0x129a <xTaskResumeAll>
    13ce:	81 11       	cpse	r24, r1
		}
	}
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <vTaskDelay+0x32>
    13d2:	97 dc       	rcall	.-1746   	; 0xd02 <vPortYield>
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    13da:	0f 2e       	mov	r0, r31
    13dc:	f2 e8       	ldi	r31, 0x82	; 130
    13de:	ef 2e       	mov	r14, r31
    13e0:	f7 e0       	ldi	r31, 0x07	; 7
    13e2:	ff 2e       	mov	r15, r31
    13e4:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    13e6:	ca ea       	ldi	r28, 0xAA	; 170
    13e8:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    13ea:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <uxTasksDeleted>
    13ee:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
    13f0:	41 f1       	breq	.+80     	; 0x1442 <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    13f2:	8b de       	rcall	.-746    	; 0x110a <vTaskSuspendAll>
			xTaskResumeAll();
    13f4:	d7 01       	movw	r26, r14
    13f6:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
    13f8:	50 df       	rcall	.-352    	; 0x129a <xTaskResumeAll>
    13fa:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    13fc:	11 f1       	breq	.+68     	; 0x1442 <prvIdleTask+0x68>
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1402:	0f 92       	push	r0
    1404:	d7 01       	movw	r26, r14
    1406:	15 96       	adiw	r26, 0x05	; 5
    1408:	ed 91       	ld	r30, X+
    140a:	fc 91       	ld	r31, X
    140c:	16 97       	sbiw	r26, 0x06	; 6
    140e:	06 81       	ldd	r16, Z+6	; 0x06
					vListRemove( &( pxTCB->xGenericListItem ) );
    1410:	17 81       	ldd	r17, Z+7	; 0x07
    1412:	c8 01       	movw	r24, r16
    1414:	02 96       	adiw	r24, 0x02	; 2
    1416:	0e 94 40 01 	call	0x280	; 0x280 <vListRemove>
					--uxCurrentNumberOfTasks;
    141a:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <uxCurrentNumberOfTasks>
    141e:	81 50       	subi	r24, 0x01	; 1
    1420:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    1424:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <uxTasksDeleted>
    1428:	81 50       	subi	r24, 0x01	; 1
    142a:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    142e:	0f 90       	pop	r0
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	f8 01       	movw	r30, r16
    1434:	87 89       	ldd	r24, Z+23	; 0x17
    1436:	90 8d       	ldd	r25, Z+24	; 0x18
    1438:	0e 94 cb 00 	call	0x196	; 0x196 <vPortFree>
		vPortFree( pxTCB );
    143c:	c8 01       	movw	r24, r16
    143e:	0e 94 cb 00 	call	0x196	; 0x196 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1442:	88 81       	ld	r24, Y
			{
				taskYIELD();
    1444:	82 30       	cpi	r24, 0x02	; 2
    1446:	88 f2       	brcs	.-94     	; 0x13ea <prvIdleTask+0x10>
    1448:	5c dc       	rcall	.-1864   	; 0xd02 <vPortYield>
    144a:	cf cf       	rjmp	.-98     	; 0x13ea <prvIdleTask+0x10>

0000144c <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    144c:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <uxSchedulerSuspended>
    1450:	81 11       	cpse	r24, r1
    1452:	13 c0       	rjmp	.+38     	; 0x147a <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1454:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxTopReadyPriority>
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	fc 01       	movw	r30, r24
    145c:	ee 0f       	add	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	ee 0f       	add	r30, r30
    1462:	ff 1f       	adc	r31, r31
    1464:	ee 0f       	add	r30, r30
    1466:	ff 1f       	adc	r31, r31
    1468:	8e 0f       	add	r24, r30
    146a:	9f 1f       	adc	r25, r31
    146c:	fc 01       	movw	r30, r24
    146e:	e6 55       	subi	r30, 0x56	; 86
    1470:	f8 4f       	sbci	r31, 0xF8	; 248
    1472:	80 81       	ld	r24, Z
    1474:	88 23       	and	r24, r24
    1476:	29 f0       	breq	.+10     	; 0x1482 <vTaskSwitchContext+0x36>
    1478:	1b c0       	rjmp	.+54     	; 0x14b0 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <xMissedYield>
    1480:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1482:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxTopReadyPriority>
    1486:	81 50       	subi	r24, 0x01	; 1
    1488:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    148c:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxTopReadyPriority>
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	fc 01       	movw	r30, r24
    1494:	ee 0f       	add	r30, r30
    1496:	ff 1f       	adc	r31, r31
    1498:	ee 0f       	add	r30, r30
    149a:	ff 1f       	adc	r31, r31
    149c:	ee 0f       	add	r30, r30
    149e:	ff 1f       	adc	r31, r31
    14a0:	8e 0f       	add	r24, r30
    14a2:	9f 1f       	adc	r25, r31
    14a4:	fc 01       	movw	r30, r24
    14a6:	e6 55       	subi	r30, 0x56	; 86
    14a8:	f8 4f       	sbci	r31, 0xF8	; 248
    14aa:	80 81       	ld	r24, Z
    14ac:	88 23       	and	r24, r24
    14ae:	49 f3       	breq	.-46     	; 0x1482 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    14b0:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxTopReadyPriority>
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	9c 01       	movw	r18, r24
    14b8:	22 0f       	add	r18, r18
    14ba:	33 1f       	adc	r19, r19
    14bc:	22 0f       	add	r18, r18
    14be:	33 1f       	adc	r19, r19
    14c0:	22 0f       	add	r18, r18
    14c2:	33 1f       	adc	r19, r19
    14c4:	28 0f       	add	r18, r24
    14c6:	39 1f       	adc	r19, r25
    14c8:	d9 01       	movw	r26, r18
    14ca:	a6 55       	subi	r26, 0x56	; 86
    14cc:	b8 4f       	sbci	r27, 0xF8	; 248
    14ce:	11 96       	adiw	r26, 0x01	; 1
    14d0:	ed 91       	ld	r30, X+
    14d2:	fc 91       	ld	r31, X
    14d4:	12 97       	sbiw	r26, 0x02	; 2
    14d6:	02 80       	ldd	r0, Z+2	; 0x02
    14d8:	f3 81       	ldd	r31, Z+3	; 0x03
    14da:	e0 2d       	mov	r30, r0
    14dc:	12 96       	adiw	r26, 0x02	; 2
    14de:	fc 93       	st	X, r31
    14e0:	ee 93       	st	-X, r30
    14e2:	11 97       	sbiw	r26, 0x01	; 1
    14e4:	23 55       	subi	r18, 0x53	; 83
    14e6:	38 4f       	sbci	r19, 0xF8	; 248
    14e8:	e2 17       	cp	r30, r18
    14ea:	f3 07       	cpc	r31, r19
    14ec:	29 f4       	brne	.+10     	; 0x14f8 <vTaskSwitchContext+0xac>
    14ee:	22 81       	ldd	r18, Z+2	; 0x02
    14f0:	33 81       	ldd	r19, Z+3	; 0x03
    14f2:	fd 01       	movw	r30, r26
    14f4:	32 83       	std	Z+2, r19	; 0x02
    14f6:	21 83       	std	Z+1, r18	; 0x01
    14f8:	fc 01       	movw	r30, r24
    14fa:	ee 0f       	add	r30, r30
    14fc:	ff 1f       	adc	r31, r31
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	ee 0f       	add	r30, r30
    1504:	ff 1f       	adc	r31, r31
    1506:	8e 0f       	add	r24, r30
    1508:	9f 1f       	adc	r25, r31
    150a:	fc 01       	movw	r30, r24
    150c:	e6 55       	subi	r30, 0x56	; 86
    150e:	f8 4f       	sbci	r31, 0xF8	; 248
    1510:	01 80       	ldd	r0, Z+1	; 0x01
    1512:	f2 81       	ldd	r31, Z+2	; 0x02
    1514:	e0 2d       	mov	r30, r0
    1516:	86 81       	ldd	r24, Z+6	; 0x06
    1518:	97 81       	ldd	r25, Z+7	; 0x07
    151a:	90 93 cf 07 	sts	0x07CF, r25	; 0x8007cf <pxCurrentTCB+0x1>
    151e:	80 93 ce 07 	sts	0x07CE, r24	; 0x8007ce <pxCurrentTCB>
    1522:	08 95       	ret

00001524 <__subsf3>:
    1524:	50 58       	subi	r21, 0x80	; 128

00001526 <__addsf3>:
    1526:	bb 27       	eor	r27, r27
    1528:	aa 27       	eor	r26, r26
    152a:	0e d0       	rcall	.+28     	; 0x1548 <__addsf3x>
    152c:	e0 c0       	rjmp	.+448    	; 0x16ee <__fp_round>
    152e:	d1 d0       	rcall	.+418    	; 0x16d2 <__fp_pscA>
    1530:	30 f0       	brcs	.+12     	; 0x153e <__addsf3+0x18>
    1532:	d6 d0       	rcall	.+428    	; 0x16e0 <__fp_pscB>
    1534:	20 f0       	brcs	.+8      	; 0x153e <__addsf3+0x18>
    1536:	31 f4       	brne	.+12     	; 0x1544 <__addsf3+0x1e>
    1538:	9f 3f       	cpi	r25, 0xFF	; 255
    153a:	11 f4       	brne	.+4      	; 0x1540 <__addsf3+0x1a>
    153c:	1e f4       	brtc	.+6      	; 0x1544 <__addsf3+0x1e>
    153e:	c6 c0       	rjmp	.+396    	; 0x16cc <__fp_nan>
    1540:	0e f4       	brtc	.+2      	; 0x1544 <__addsf3+0x1e>
    1542:	e0 95       	com	r30
    1544:	e7 fb       	bst	r30, 7
    1546:	bc c0       	rjmp	.+376    	; 0x16c0 <__fp_inf>

00001548 <__addsf3x>:
    1548:	e9 2f       	mov	r30, r25
    154a:	e2 d0       	rcall	.+452    	; 0x1710 <__fp_split3>
    154c:	80 f3       	brcs	.-32     	; 0x152e <__addsf3+0x8>
    154e:	ba 17       	cp	r27, r26
    1550:	62 07       	cpc	r22, r18
    1552:	73 07       	cpc	r23, r19
    1554:	84 07       	cpc	r24, r20
    1556:	95 07       	cpc	r25, r21
    1558:	18 f0       	brcs	.+6      	; 0x1560 <__addsf3x+0x18>
    155a:	71 f4       	brne	.+28     	; 0x1578 <__addsf3x+0x30>
    155c:	9e f5       	brtc	.+102    	; 0x15c4 <__addsf3x+0x7c>
    155e:	fa c0       	rjmp	.+500    	; 0x1754 <__fp_zero>
    1560:	0e f4       	brtc	.+2      	; 0x1564 <__addsf3x+0x1c>
    1562:	e0 95       	com	r30
    1564:	0b 2e       	mov	r0, r27
    1566:	ba 2f       	mov	r27, r26
    1568:	a0 2d       	mov	r26, r0
    156a:	0b 01       	movw	r0, r22
    156c:	b9 01       	movw	r22, r18
    156e:	90 01       	movw	r18, r0
    1570:	0c 01       	movw	r0, r24
    1572:	ca 01       	movw	r24, r20
    1574:	a0 01       	movw	r20, r0
    1576:	11 24       	eor	r1, r1
    1578:	ff 27       	eor	r31, r31
    157a:	59 1b       	sub	r21, r25
    157c:	99 f0       	breq	.+38     	; 0x15a4 <__addsf3x+0x5c>
    157e:	59 3f       	cpi	r21, 0xF9	; 249
    1580:	50 f4       	brcc	.+20     	; 0x1596 <__addsf3x+0x4e>
    1582:	50 3e       	cpi	r21, 0xE0	; 224
    1584:	68 f1       	brcs	.+90     	; 0x15e0 <__addsf3x+0x98>
    1586:	1a 16       	cp	r1, r26
    1588:	f0 40       	sbci	r31, 0x00	; 0
    158a:	a2 2f       	mov	r26, r18
    158c:	23 2f       	mov	r18, r19
    158e:	34 2f       	mov	r19, r20
    1590:	44 27       	eor	r20, r20
    1592:	58 5f       	subi	r21, 0xF8	; 248
    1594:	f3 cf       	rjmp	.-26     	; 0x157c <__addsf3x+0x34>
    1596:	46 95       	lsr	r20
    1598:	37 95       	ror	r19
    159a:	27 95       	ror	r18
    159c:	a7 95       	ror	r26
    159e:	f0 40       	sbci	r31, 0x00	; 0
    15a0:	53 95       	inc	r21
    15a2:	c9 f7       	brne	.-14     	; 0x1596 <__addsf3x+0x4e>
    15a4:	7e f4       	brtc	.+30     	; 0x15c4 <__addsf3x+0x7c>
    15a6:	1f 16       	cp	r1, r31
    15a8:	ba 0b       	sbc	r27, r26
    15aa:	62 0b       	sbc	r22, r18
    15ac:	73 0b       	sbc	r23, r19
    15ae:	84 0b       	sbc	r24, r20
    15b0:	ba f0       	brmi	.+46     	; 0x15e0 <__addsf3x+0x98>
    15b2:	91 50       	subi	r25, 0x01	; 1
    15b4:	a1 f0       	breq	.+40     	; 0x15de <__addsf3x+0x96>
    15b6:	ff 0f       	add	r31, r31
    15b8:	bb 1f       	adc	r27, r27
    15ba:	66 1f       	adc	r22, r22
    15bc:	77 1f       	adc	r23, r23
    15be:	88 1f       	adc	r24, r24
    15c0:	c2 f7       	brpl	.-16     	; 0x15b2 <__addsf3x+0x6a>
    15c2:	0e c0       	rjmp	.+28     	; 0x15e0 <__addsf3x+0x98>
    15c4:	ba 0f       	add	r27, r26
    15c6:	62 1f       	adc	r22, r18
    15c8:	73 1f       	adc	r23, r19
    15ca:	84 1f       	adc	r24, r20
    15cc:	48 f4       	brcc	.+18     	; 0x15e0 <__addsf3x+0x98>
    15ce:	87 95       	ror	r24
    15d0:	77 95       	ror	r23
    15d2:	67 95       	ror	r22
    15d4:	b7 95       	ror	r27
    15d6:	f7 95       	ror	r31
    15d8:	9e 3f       	cpi	r25, 0xFE	; 254
    15da:	08 f0       	brcs	.+2      	; 0x15de <__addsf3x+0x96>
    15dc:	b3 cf       	rjmp	.-154    	; 0x1544 <__addsf3+0x1e>
    15de:	93 95       	inc	r25
    15e0:	88 0f       	add	r24, r24
    15e2:	08 f0       	brcs	.+2      	; 0x15e6 <__addsf3x+0x9e>
    15e4:	99 27       	eor	r25, r25
    15e6:	ee 0f       	add	r30, r30
    15e8:	97 95       	ror	r25
    15ea:	87 95       	ror	r24
    15ec:	08 95       	ret

000015ee <__fixunssfsi>:
    15ee:	98 d0       	rcall	.+304    	; 0x1720 <__fp_splitA>
    15f0:	88 f0       	brcs	.+34     	; 0x1614 <__fixunssfsi+0x26>
    15f2:	9f 57       	subi	r25, 0x7F	; 127
    15f4:	90 f0       	brcs	.+36     	; 0x161a <__fixunssfsi+0x2c>
    15f6:	b9 2f       	mov	r27, r25
    15f8:	99 27       	eor	r25, r25
    15fa:	b7 51       	subi	r27, 0x17	; 23
    15fc:	a0 f0       	brcs	.+40     	; 0x1626 <__fixunssfsi+0x38>
    15fe:	d1 f0       	breq	.+52     	; 0x1634 <__fixunssfsi+0x46>
    1600:	66 0f       	add	r22, r22
    1602:	77 1f       	adc	r23, r23
    1604:	88 1f       	adc	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	1a f0       	brmi	.+6      	; 0x1610 <__fixunssfsi+0x22>
    160a:	ba 95       	dec	r27
    160c:	c9 f7       	brne	.-14     	; 0x1600 <__fixunssfsi+0x12>
    160e:	12 c0       	rjmp	.+36     	; 0x1634 <__fixunssfsi+0x46>
    1610:	b1 30       	cpi	r27, 0x01	; 1
    1612:	81 f0       	breq	.+32     	; 0x1634 <__fixunssfsi+0x46>
    1614:	9f d0       	rcall	.+318    	; 0x1754 <__fp_zero>
    1616:	b1 e0       	ldi	r27, 0x01	; 1
    1618:	08 95       	ret
    161a:	9c c0       	rjmp	.+312    	; 0x1754 <__fp_zero>
    161c:	67 2f       	mov	r22, r23
    161e:	78 2f       	mov	r23, r24
    1620:	88 27       	eor	r24, r24
    1622:	b8 5f       	subi	r27, 0xF8	; 248
    1624:	39 f0       	breq	.+14     	; 0x1634 <__fixunssfsi+0x46>
    1626:	b9 3f       	cpi	r27, 0xF9	; 249
    1628:	cc f3       	brlt	.-14     	; 0x161c <__fixunssfsi+0x2e>
    162a:	86 95       	lsr	r24
    162c:	77 95       	ror	r23
    162e:	67 95       	ror	r22
    1630:	b3 95       	inc	r27
    1632:	d9 f7       	brne	.-10     	; 0x162a <__fixunssfsi+0x3c>
    1634:	3e f4       	brtc	.+14     	; 0x1644 <__fixunssfsi+0x56>
    1636:	90 95       	com	r25
    1638:	80 95       	com	r24
    163a:	70 95       	com	r23
    163c:	61 95       	neg	r22
    163e:	7f 4f       	sbci	r23, 0xFF	; 255
    1640:	8f 4f       	sbci	r24, 0xFF	; 255
    1642:	9f 4f       	sbci	r25, 0xFF	; 255
    1644:	08 95       	ret

00001646 <__floatunsisf>:
    1646:	e8 94       	clt
    1648:	09 c0       	rjmp	.+18     	; 0x165c <__floatsisf+0x12>

0000164a <__floatsisf>:
    164a:	97 fb       	bst	r25, 7
    164c:	3e f4       	brtc	.+14     	; 0x165c <__floatsisf+0x12>
    164e:	90 95       	com	r25
    1650:	80 95       	com	r24
    1652:	70 95       	com	r23
    1654:	61 95       	neg	r22
    1656:	7f 4f       	sbci	r23, 0xFF	; 255
    1658:	8f 4f       	sbci	r24, 0xFF	; 255
    165a:	9f 4f       	sbci	r25, 0xFF	; 255
    165c:	99 23       	and	r25, r25
    165e:	a9 f0       	breq	.+42     	; 0x168a <__floatsisf+0x40>
    1660:	f9 2f       	mov	r31, r25
    1662:	96 e9       	ldi	r25, 0x96	; 150
    1664:	bb 27       	eor	r27, r27
    1666:	93 95       	inc	r25
    1668:	f6 95       	lsr	r31
    166a:	87 95       	ror	r24
    166c:	77 95       	ror	r23
    166e:	67 95       	ror	r22
    1670:	b7 95       	ror	r27
    1672:	f1 11       	cpse	r31, r1
    1674:	f8 cf       	rjmp	.-16     	; 0x1666 <__floatsisf+0x1c>
    1676:	fa f4       	brpl	.+62     	; 0x16b6 <__floatsisf+0x6c>
    1678:	bb 0f       	add	r27, r27
    167a:	11 f4       	brne	.+4      	; 0x1680 <__floatsisf+0x36>
    167c:	60 ff       	sbrs	r22, 0
    167e:	1b c0       	rjmp	.+54     	; 0x16b6 <__floatsisf+0x6c>
    1680:	6f 5f       	subi	r22, 0xFF	; 255
    1682:	7f 4f       	sbci	r23, 0xFF	; 255
    1684:	8f 4f       	sbci	r24, 0xFF	; 255
    1686:	9f 4f       	sbci	r25, 0xFF	; 255
    1688:	16 c0       	rjmp	.+44     	; 0x16b6 <__floatsisf+0x6c>
    168a:	88 23       	and	r24, r24
    168c:	11 f0       	breq	.+4      	; 0x1692 <__floatsisf+0x48>
    168e:	96 e9       	ldi	r25, 0x96	; 150
    1690:	11 c0       	rjmp	.+34     	; 0x16b4 <__floatsisf+0x6a>
    1692:	77 23       	and	r23, r23
    1694:	21 f0       	breq	.+8      	; 0x169e <__floatsisf+0x54>
    1696:	9e e8       	ldi	r25, 0x8E	; 142
    1698:	87 2f       	mov	r24, r23
    169a:	76 2f       	mov	r23, r22
    169c:	05 c0       	rjmp	.+10     	; 0x16a8 <__floatsisf+0x5e>
    169e:	66 23       	and	r22, r22
    16a0:	71 f0       	breq	.+28     	; 0x16be <__floatsisf+0x74>
    16a2:	96 e8       	ldi	r25, 0x86	; 134
    16a4:	86 2f       	mov	r24, r22
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	2a f0       	brmi	.+10     	; 0x16b6 <__floatsisf+0x6c>
    16ac:	9a 95       	dec	r25
    16ae:	66 0f       	add	r22, r22
    16b0:	77 1f       	adc	r23, r23
    16b2:	88 1f       	adc	r24, r24
    16b4:	da f7       	brpl	.-10     	; 0x16ac <__floatsisf+0x62>
    16b6:	88 0f       	add	r24, r24
    16b8:	96 95       	lsr	r25
    16ba:	87 95       	ror	r24
    16bc:	97 f9       	bld	r25, 7
    16be:	08 95       	ret

000016c0 <__fp_inf>:
    16c0:	97 f9       	bld	r25, 7
    16c2:	9f 67       	ori	r25, 0x7F	; 127
    16c4:	80 e8       	ldi	r24, 0x80	; 128
    16c6:	70 e0       	ldi	r23, 0x00	; 0
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	08 95       	ret

000016cc <__fp_nan>:
    16cc:	9f ef       	ldi	r25, 0xFF	; 255
    16ce:	80 ec       	ldi	r24, 0xC0	; 192
    16d0:	08 95       	ret

000016d2 <__fp_pscA>:
    16d2:	00 24       	eor	r0, r0
    16d4:	0a 94       	dec	r0
    16d6:	16 16       	cp	r1, r22
    16d8:	17 06       	cpc	r1, r23
    16da:	18 06       	cpc	r1, r24
    16dc:	09 06       	cpc	r0, r25
    16de:	08 95       	ret

000016e0 <__fp_pscB>:
    16e0:	00 24       	eor	r0, r0
    16e2:	0a 94       	dec	r0
    16e4:	12 16       	cp	r1, r18
    16e6:	13 06       	cpc	r1, r19
    16e8:	14 06       	cpc	r1, r20
    16ea:	05 06       	cpc	r0, r21
    16ec:	08 95       	ret

000016ee <__fp_round>:
    16ee:	09 2e       	mov	r0, r25
    16f0:	03 94       	inc	r0
    16f2:	00 0c       	add	r0, r0
    16f4:	11 f4       	brne	.+4      	; 0x16fa <__fp_round+0xc>
    16f6:	88 23       	and	r24, r24
    16f8:	52 f0       	brmi	.+20     	; 0x170e <__fp_round+0x20>
    16fa:	bb 0f       	add	r27, r27
    16fc:	40 f4       	brcc	.+16     	; 0x170e <__fp_round+0x20>
    16fe:	bf 2b       	or	r27, r31
    1700:	11 f4       	brne	.+4      	; 0x1706 <__fp_round+0x18>
    1702:	60 ff       	sbrs	r22, 0
    1704:	04 c0       	rjmp	.+8      	; 0x170e <__fp_round+0x20>
    1706:	6f 5f       	subi	r22, 0xFF	; 255
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	8f 4f       	sbci	r24, 0xFF	; 255
    170c:	9f 4f       	sbci	r25, 0xFF	; 255
    170e:	08 95       	ret

00001710 <__fp_split3>:
    1710:	57 fd       	sbrc	r21, 7
    1712:	90 58       	subi	r25, 0x80	; 128
    1714:	44 0f       	add	r20, r20
    1716:	55 1f       	adc	r21, r21
    1718:	59 f0       	breq	.+22     	; 0x1730 <__fp_splitA+0x10>
    171a:	5f 3f       	cpi	r21, 0xFF	; 255
    171c:	71 f0       	breq	.+28     	; 0x173a <__fp_splitA+0x1a>
    171e:	47 95       	ror	r20

00001720 <__fp_splitA>:
    1720:	88 0f       	add	r24, r24
    1722:	97 fb       	bst	r25, 7
    1724:	99 1f       	adc	r25, r25
    1726:	61 f0       	breq	.+24     	; 0x1740 <__fp_splitA+0x20>
    1728:	9f 3f       	cpi	r25, 0xFF	; 255
    172a:	79 f0       	breq	.+30     	; 0x174a <__fp_splitA+0x2a>
    172c:	87 95       	ror	r24
    172e:	08 95       	ret
    1730:	12 16       	cp	r1, r18
    1732:	13 06       	cpc	r1, r19
    1734:	14 06       	cpc	r1, r20
    1736:	55 1f       	adc	r21, r21
    1738:	f2 cf       	rjmp	.-28     	; 0x171e <__fp_split3+0xe>
    173a:	46 95       	lsr	r20
    173c:	f1 df       	rcall	.-30     	; 0x1720 <__fp_splitA>
    173e:	08 c0       	rjmp	.+16     	; 0x1750 <__fp_splitA+0x30>
    1740:	16 16       	cp	r1, r22
    1742:	17 06       	cpc	r1, r23
    1744:	18 06       	cpc	r1, r24
    1746:	99 1f       	adc	r25, r25
    1748:	f1 cf       	rjmp	.-30     	; 0x172c <__fp_splitA+0xc>
    174a:	86 95       	lsr	r24
    174c:	71 05       	cpc	r23, r1
    174e:	61 05       	cpc	r22, r1
    1750:	08 94       	sec
    1752:	08 95       	ret

00001754 <__fp_zero>:
    1754:	e8 94       	clt

00001756 <__fp_szero>:
    1756:	bb 27       	eor	r27, r27
    1758:	66 27       	eor	r22, r22
    175a:	77 27       	eor	r23, r23
    175c:	cb 01       	movw	r24, r22
    175e:	97 f9       	bld	r25, 7
    1760:	08 95       	ret

00001762 <__mulsf3>:
    1762:	0b d0       	rcall	.+22     	; 0x177a <__mulsf3x>
    1764:	c4 cf       	rjmp	.-120    	; 0x16ee <__fp_round>
    1766:	b5 df       	rcall	.-150    	; 0x16d2 <__fp_pscA>
    1768:	28 f0       	brcs	.+10     	; 0x1774 <__mulsf3+0x12>
    176a:	ba df       	rcall	.-140    	; 0x16e0 <__fp_pscB>
    176c:	18 f0       	brcs	.+6      	; 0x1774 <__mulsf3+0x12>
    176e:	95 23       	and	r25, r21
    1770:	09 f0       	breq	.+2      	; 0x1774 <__mulsf3+0x12>
    1772:	a6 cf       	rjmp	.-180    	; 0x16c0 <__fp_inf>
    1774:	ab cf       	rjmp	.-170    	; 0x16cc <__fp_nan>
    1776:	11 24       	eor	r1, r1
    1778:	ee cf       	rjmp	.-36     	; 0x1756 <__fp_szero>

0000177a <__mulsf3x>:
    177a:	ca df       	rcall	.-108    	; 0x1710 <__fp_split3>
    177c:	a0 f3       	brcs	.-24     	; 0x1766 <__mulsf3+0x4>

0000177e <__mulsf3_pse>:
    177e:	95 9f       	mul	r25, r21
    1780:	d1 f3       	breq	.-12     	; 0x1776 <__mulsf3+0x14>
    1782:	95 0f       	add	r25, r21
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	55 1f       	adc	r21, r21
    1788:	62 9f       	mul	r22, r18
    178a:	f0 01       	movw	r30, r0
    178c:	72 9f       	mul	r23, r18
    178e:	bb 27       	eor	r27, r27
    1790:	f0 0d       	add	r31, r0
    1792:	b1 1d       	adc	r27, r1
    1794:	63 9f       	mul	r22, r19
    1796:	aa 27       	eor	r26, r26
    1798:	f0 0d       	add	r31, r0
    179a:	b1 1d       	adc	r27, r1
    179c:	aa 1f       	adc	r26, r26
    179e:	64 9f       	mul	r22, r20
    17a0:	66 27       	eor	r22, r22
    17a2:	b0 0d       	add	r27, r0
    17a4:	a1 1d       	adc	r26, r1
    17a6:	66 1f       	adc	r22, r22
    17a8:	82 9f       	mul	r24, r18
    17aa:	22 27       	eor	r18, r18
    17ac:	b0 0d       	add	r27, r0
    17ae:	a1 1d       	adc	r26, r1
    17b0:	62 1f       	adc	r22, r18
    17b2:	73 9f       	mul	r23, r19
    17b4:	b0 0d       	add	r27, r0
    17b6:	a1 1d       	adc	r26, r1
    17b8:	62 1f       	adc	r22, r18
    17ba:	83 9f       	mul	r24, r19
    17bc:	a0 0d       	add	r26, r0
    17be:	61 1d       	adc	r22, r1
    17c0:	22 1f       	adc	r18, r18
    17c2:	74 9f       	mul	r23, r20
    17c4:	33 27       	eor	r19, r19
    17c6:	a0 0d       	add	r26, r0
    17c8:	61 1d       	adc	r22, r1
    17ca:	23 1f       	adc	r18, r19
    17cc:	84 9f       	mul	r24, r20
    17ce:	60 0d       	add	r22, r0
    17d0:	21 1d       	adc	r18, r1
    17d2:	82 2f       	mov	r24, r18
    17d4:	76 2f       	mov	r23, r22
    17d6:	6a 2f       	mov	r22, r26
    17d8:	11 24       	eor	r1, r1
    17da:	9f 57       	subi	r25, 0x7F	; 127
    17dc:	50 40       	sbci	r21, 0x00	; 0
    17de:	8a f0       	brmi	.+34     	; 0x1802 <__mulsf3_pse+0x84>
    17e0:	e1 f0       	breq	.+56     	; 0x181a <__mulsf3_pse+0x9c>
    17e2:	88 23       	and	r24, r24
    17e4:	4a f0       	brmi	.+18     	; 0x17f8 <__mulsf3_pse+0x7a>
    17e6:	ee 0f       	add	r30, r30
    17e8:	ff 1f       	adc	r31, r31
    17ea:	bb 1f       	adc	r27, r27
    17ec:	66 1f       	adc	r22, r22
    17ee:	77 1f       	adc	r23, r23
    17f0:	88 1f       	adc	r24, r24
    17f2:	91 50       	subi	r25, 0x01	; 1
    17f4:	50 40       	sbci	r21, 0x00	; 0
    17f6:	a9 f7       	brne	.-22     	; 0x17e2 <__mulsf3_pse+0x64>
    17f8:	9e 3f       	cpi	r25, 0xFE	; 254
    17fa:	51 05       	cpc	r21, r1
    17fc:	70 f0       	brcs	.+28     	; 0x181a <__mulsf3_pse+0x9c>
    17fe:	60 cf       	rjmp	.-320    	; 0x16c0 <__fp_inf>
    1800:	aa cf       	rjmp	.-172    	; 0x1756 <__fp_szero>
    1802:	5f 3f       	cpi	r21, 0xFF	; 255
    1804:	ec f3       	brlt	.-6      	; 0x1800 <__mulsf3_pse+0x82>
    1806:	98 3e       	cpi	r25, 0xE8	; 232
    1808:	dc f3       	brlt	.-10     	; 0x1800 <__mulsf3_pse+0x82>
    180a:	86 95       	lsr	r24
    180c:	77 95       	ror	r23
    180e:	67 95       	ror	r22
    1810:	b7 95       	ror	r27
    1812:	f7 95       	ror	r31
    1814:	e7 95       	ror	r30
    1816:	9f 5f       	subi	r25, 0xFF	; 255
    1818:	c1 f7       	brne	.-16     	; 0x180a <__mulsf3_pse+0x8c>
    181a:	fe 2b       	or	r31, r30
    181c:	88 0f       	add	r24, r24
    181e:	91 1d       	adc	r25, r1
    1820:	96 95       	lsr	r25
    1822:	87 95       	ror	r24
    1824:	97 f9       	bld	r25, 7
    1826:	08 95       	ret

00001828 <pow>:
    1828:	fa 01       	movw	r30, r20
    182a:	ee 0f       	add	r30, r30
    182c:	ff 1f       	adc	r31, r31
    182e:	30 96       	adiw	r30, 0x00	; 0
    1830:	21 05       	cpc	r18, r1
    1832:	31 05       	cpc	r19, r1
    1834:	99 f1       	breq	.+102    	; 0x189c <pow+0x74>
    1836:	61 15       	cp	r22, r1
    1838:	71 05       	cpc	r23, r1
    183a:	61 f4       	brne	.+24     	; 0x1854 <pow+0x2c>
    183c:	80 38       	cpi	r24, 0x80	; 128
    183e:	bf e3       	ldi	r27, 0x3F	; 63
    1840:	9b 07       	cpc	r25, r27
    1842:	49 f1       	breq	.+82     	; 0x1896 <pow+0x6e>
    1844:	68 94       	set
    1846:	90 38       	cpi	r25, 0x80	; 128
    1848:	81 05       	cpc	r24, r1
    184a:	61 f0       	breq	.+24     	; 0x1864 <pow+0x3c>
    184c:	80 38       	cpi	r24, 0x80	; 128
    184e:	bf ef       	ldi	r27, 0xFF	; 255
    1850:	9b 07       	cpc	r25, r27
    1852:	41 f0       	breq	.+16     	; 0x1864 <pow+0x3c>
    1854:	99 23       	and	r25, r25
    1856:	42 f5       	brpl	.+80     	; 0x18a8 <pow+0x80>
    1858:	ff 3f       	cpi	r31, 0xFF	; 255
    185a:	e1 05       	cpc	r30, r1
    185c:	31 05       	cpc	r19, r1
    185e:	21 05       	cpc	r18, r1
    1860:	11 f1       	breq	.+68     	; 0x18a6 <pow+0x7e>
    1862:	e8 94       	clt
    1864:	08 94       	sec
    1866:	e7 95       	ror	r30
    1868:	d9 01       	movw	r26, r18
    186a:	aa 23       	and	r26, r26
    186c:	29 f4       	brne	.+10     	; 0x1878 <pow+0x50>
    186e:	ab 2f       	mov	r26, r27
    1870:	be 2f       	mov	r27, r30
    1872:	f8 5f       	subi	r31, 0xF8	; 248
    1874:	d0 f3       	brcs	.-12     	; 0x186a <pow+0x42>
    1876:	10 c0       	rjmp	.+32     	; 0x1898 <pow+0x70>
    1878:	ff 5f       	subi	r31, 0xFF	; 255
    187a:	70 f4       	brcc	.+28     	; 0x1898 <pow+0x70>
    187c:	a6 95       	lsr	r26
    187e:	e0 f7       	brcc	.-8      	; 0x1878 <pow+0x50>
    1880:	f7 39       	cpi	r31, 0x97	; 151
    1882:	50 f0       	brcs	.+20     	; 0x1898 <pow+0x70>
    1884:	19 f0       	breq	.+6      	; 0x188c <pow+0x64>
    1886:	ff 3a       	cpi	r31, 0xAF	; 175
    1888:	38 f4       	brcc	.+14     	; 0x1898 <pow+0x70>
    188a:	9f 77       	andi	r25, 0x7F	; 127
    188c:	9f 93       	push	r25
    188e:	0c d0       	rcall	.+24     	; 0x18a8 <pow+0x80>
    1890:	0f 90       	pop	r0
    1892:	07 fc       	sbrc	r0, 7
    1894:	90 58       	subi	r25, 0x80	; 128
    1896:	08 95       	ret
    1898:	3e f0       	brts	.+14     	; 0x18a8 <pow+0x80>
    189a:	18 cf       	rjmp	.-464    	; 0x16cc <__fp_nan>
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	80 e8       	ldi	r24, 0x80	; 128
    18a2:	9f e3       	ldi	r25, 0x3F	; 63
    18a4:	08 95       	ret
    18a6:	4f e7       	ldi	r20, 0x7F	; 127
    18a8:	9f 77       	andi	r25, 0x7F	; 127
    18aa:	5f 93       	push	r21
    18ac:	4f 93       	push	r20
    18ae:	3f 93       	push	r19
    18b0:	2f 93       	push	r18
    18b2:	9e d0       	rcall	.+316    	; 0x19f0 <log>
    18b4:	2f 91       	pop	r18
    18b6:	3f 91       	pop	r19
    18b8:	4f 91       	pop	r20
    18ba:	5f 91       	pop	r21
    18bc:	52 df       	rcall	.-348    	; 0x1762 <__mulsf3>
    18be:	05 c0       	rjmp	.+10     	; 0x18ca <exp>
    18c0:	19 f4       	brne	.+6      	; 0x18c8 <pow+0xa0>
    18c2:	0e f0       	brts	.+2      	; 0x18c6 <pow+0x9e>
    18c4:	fd ce       	rjmp	.-518    	; 0x16c0 <__fp_inf>
    18c6:	46 cf       	rjmp	.-372    	; 0x1754 <__fp_zero>
    18c8:	01 cf       	rjmp	.-510    	; 0x16cc <__fp_nan>

000018ca <exp>:
    18ca:	2a df       	rcall	.-428    	; 0x1720 <__fp_splitA>
    18cc:	c8 f3       	brcs	.-14     	; 0x18c0 <pow+0x98>
    18ce:	96 38       	cpi	r25, 0x86	; 134
    18d0:	c0 f7       	brcc	.-16     	; 0x18c2 <pow+0x9a>
    18d2:	07 f8       	bld	r0, 7
    18d4:	0f 92       	push	r0
    18d6:	e8 94       	clt
    18d8:	2b e3       	ldi	r18, 0x3B	; 59
    18da:	3a ea       	ldi	r19, 0xAA	; 170
    18dc:	48 eb       	ldi	r20, 0xB8	; 184
    18de:	5f e7       	ldi	r21, 0x7F	; 127
    18e0:	4e df       	rcall	.-356    	; 0x177e <__mulsf3_pse>
    18e2:	0f 92       	push	r0
    18e4:	0f 92       	push	r0
    18e6:	0f 92       	push	r0
    18e8:	4d b7       	in	r20, 0x3d	; 61
    18ea:	5e b7       	in	r21, 0x3e	; 62
    18ec:	0f 92       	push	r0
    18ee:	c0 d0       	rcall	.+384    	; 0x1a70 <modf>
    18f0:	ec e8       	ldi	r30, 0x8C	; 140
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	16 d0       	rcall	.+44     	; 0x1922 <__fp_powser>
    18f6:	4f 91       	pop	r20
    18f8:	5f 91       	pop	r21
    18fa:	ef 91       	pop	r30
    18fc:	ff 91       	pop	r31
    18fe:	e5 95       	asr	r30
    1900:	ee 1f       	adc	r30, r30
    1902:	ff 1f       	adc	r31, r31
    1904:	49 f0       	breq	.+18     	; 0x1918 <exp+0x4e>
    1906:	fe 57       	subi	r31, 0x7E	; 126
    1908:	e0 68       	ori	r30, 0x80	; 128
    190a:	44 27       	eor	r20, r20
    190c:	ee 0f       	add	r30, r30
    190e:	44 1f       	adc	r20, r20
    1910:	fa 95       	dec	r31
    1912:	e1 f7       	brne	.-8      	; 0x190c <exp+0x42>
    1914:	41 95       	neg	r20
    1916:	55 0b       	sbc	r21, r21
    1918:	32 d0       	rcall	.+100    	; 0x197e <ldexp>
    191a:	0f 90       	pop	r0
    191c:	07 fe       	sbrs	r0, 7
    191e:	26 c0       	rjmp	.+76     	; 0x196c <inverse>
    1920:	08 95       	ret

00001922 <__fp_powser>:
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	1f 93       	push	r17
    1928:	0f 93       	push	r16
    192a:	ff 92       	push	r15
    192c:	ef 92       	push	r14
    192e:	df 92       	push	r13
    1930:	7b 01       	movw	r14, r22
    1932:	8c 01       	movw	r16, r24
    1934:	68 94       	set
    1936:	05 c0       	rjmp	.+10     	; 0x1942 <__fp_powser+0x20>
    1938:	da 2e       	mov	r13, r26
    193a:	ef 01       	movw	r28, r30
    193c:	1e df       	rcall	.-452    	; 0x177a <__mulsf3x>
    193e:	fe 01       	movw	r30, r28
    1940:	e8 94       	clt
    1942:	a5 91       	lpm	r26, Z+
    1944:	25 91       	lpm	r18, Z+
    1946:	35 91       	lpm	r19, Z+
    1948:	45 91       	lpm	r20, Z+
    194a:	55 91       	lpm	r21, Z+
    194c:	ae f3       	brts	.-22     	; 0x1938 <__fp_powser+0x16>
    194e:	ef 01       	movw	r28, r30
    1950:	fb dd       	rcall	.-1034   	; 0x1548 <__addsf3x>
    1952:	fe 01       	movw	r30, r28
    1954:	97 01       	movw	r18, r14
    1956:	a8 01       	movw	r20, r16
    1958:	da 94       	dec	r13
    195a:	79 f7       	brne	.-34     	; 0x193a <__fp_powser+0x18>
    195c:	df 90       	pop	r13
    195e:	ef 90       	pop	r14
    1960:	ff 90       	pop	r15
    1962:	0f 91       	pop	r16
    1964:	1f 91       	pop	r17
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <inverse>:
    196c:	9b 01       	movw	r18, r22
    196e:	ac 01       	movw	r20, r24
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	80 e8       	ldi	r24, 0x80	; 128
    1976:	9f e3       	ldi	r25, 0x3F	; 63
    1978:	ae c0       	rjmp	.+348    	; 0x1ad6 <__divsf3>
    197a:	a2 ce       	rjmp	.-700    	; 0x16c0 <__fp_inf>
    197c:	14 c1       	rjmp	.+552    	; 0x1ba6 <__fp_mpack>

0000197e <ldexp>:
    197e:	d0 de       	rcall	.-608    	; 0x1720 <__fp_splitA>
    1980:	e8 f3       	brcs	.-6      	; 0x197c <inverse+0x10>
    1982:	99 23       	and	r25, r25
    1984:	d9 f3       	breq	.-10     	; 0x197c <inverse+0x10>
    1986:	94 0f       	add	r25, r20
    1988:	51 1d       	adc	r21, r1
    198a:	bb f3       	brvs	.-18     	; 0x197a <inverse+0xe>
    198c:	91 50       	subi	r25, 0x01	; 1
    198e:	50 40       	sbci	r21, 0x00	; 0
    1990:	94 f0       	brlt	.+36     	; 0x19b6 <ldexp+0x38>
    1992:	59 f0       	breq	.+22     	; 0x19aa <ldexp+0x2c>
    1994:	88 23       	and	r24, r24
    1996:	32 f0       	brmi	.+12     	; 0x19a4 <ldexp+0x26>
    1998:	66 0f       	add	r22, r22
    199a:	77 1f       	adc	r23, r23
    199c:	88 1f       	adc	r24, r24
    199e:	91 50       	subi	r25, 0x01	; 1
    19a0:	50 40       	sbci	r21, 0x00	; 0
    19a2:	c1 f7       	brne	.-16     	; 0x1994 <ldexp+0x16>
    19a4:	9e 3f       	cpi	r25, 0xFE	; 254
    19a6:	51 05       	cpc	r21, r1
    19a8:	44 f7       	brge	.-48     	; 0x197a <inverse+0xe>
    19aa:	88 0f       	add	r24, r24
    19ac:	91 1d       	adc	r25, r1
    19ae:	96 95       	lsr	r25
    19b0:	87 95       	ror	r24
    19b2:	97 f9       	bld	r25, 7
    19b4:	08 95       	ret
    19b6:	5f 3f       	cpi	r21, 0xFF	; 255
    19b8:	ac f0       	brlt	.+42     	; 0x19e4 <ldexp+0x66>
    19ba:	98 3e       	cpi	r25, 0xE8	; 232
    19bc:	9c f0       	brlt	.+38     	; 0x19e4 <ldexp+0x66>
    19be:	bb 27       	eor	r27, r27
    19c0:	86 95       	lsr	r24
    19c2:	77 95       	ror	r23
    19c4:	67 95       	ror	r22
    19c6:	b7 95       	ror	r27
    19c8:	08 f4       	brcc	.+2      	; 0x19cc <ldexp+0x4e>
    19ca:	b1 60       	ori	r27, 0x01	; 1
    19cc:	93 95       	inc	r25
    19ce:	c1 f7       	brne	.-16     	; 0x19c0 <ldexp+0x42>
    19d0:	bb 0f       	add	r27, r27
    19d2:	58 f7       	brcc	.-42     	; 0x19aa <ldexp+0x2c>
    19d4:	11 f4       	brne	.+4      	; 0x19da <ldexp+0x5c>
    19d6:	60 ff       	sbrs	r22, 0
    19d8:	e8 cf       	rjmp	.-48     	; 0x19aa <ldexp+0x2c>
    19da:	6f 5f       	subi	r22, 0xFF	; 255
    19dc:	7f 4f       	sbci	r23, 0xFF	; 255
    19de:	8f 4f       	sbci	r24, 0xFF	; 255
    19e0:	9f 4f       	sbci	r25, 0xFF	; 255
    19e2:	e3 cf       	rjmp	.-58     	; 0x19aa <ldexp+0x2c>
    19e4:	b8 ce       	rjmp	.-656    	; 0x1756 <__fp_szero>
    19e6:	0e f0       	brts	.+2      	; 0x19ea <ldexp+0x6c>
    19e8:	de c0       	rjmp	.+444    	; 0x1ba6 <__fp_mpack>
    19ea:	70 ce       	rjmp	.-800    	; 0x16cc <__fp_nan>
    19ec:	68 94       	set
    19ee:	68 ce       	rjmp	.-816    	; 0x16c0 <__fp_inf>

000019f0 <log>:
    19f0:	97 de       	rcall	.-722    	; 0x1720 <__fp_splitA>
    19f2:	c8 f3       	brcs	.-14     	; 0x19e6 <ldexp+0x68>
    19f4:	99 23       	and	r25, r25
    19f6:	d1 f3       	breq	.-12     	; 0x19ec <ldexp+0x6e>
    19f8:	c6 f3       	brts	.-16     	; 0x19ea <ldexp+0x6c>
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	1f 93       	push	r17
    1a00:	0f 93       	push	r16
    1a02:	ff 92       	push	r15
    1a04:	c9 2f       	mov	r28, r25
    1a06:	dd 27       	eor	r29, r29
    1a08:	88 23       	and	r24, r24
    1a0a:	2a f0       	brmi	.+10     	; 0x1a16 <log+0x26>
    1a0c:	21 97       	sbiw	r28, 0x01	; 1
    1a0e:	66 0f       	add	r22, r22
    1a10:	77 1f       	adc	r23, r23
    1a12:	88 1f       	adc	r24, r24
    1a14:	da f7       	brpl	.-10     	; 0x1a0c <log+0x1c>
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e8       	ldi	r20, 0x80	; 128
    1a1c:	5f eb       	ldi	r21, 0xBF	; 191
    1a1e:	9f e3       	ldi	r25, 0x3F	; 63
    1a20:	88 39       	cpi	r24, 0x98	; 152
    1a22:	20 f0       	brcs	.+8      	; 0x1a2c <log+0x3c>
    1a24:	80 3e       	cpi	r24, 0xE0	; 224
    1a26:	30 f0       	brcs	.+12     	; 0x1a34 <log+0x44>
    1a28:	21 96       	adiw	r28, 0x01	; 1
    1a2a:	8f 77       	andi	r24, 0x7F	; 127
    1a2c:	7c dd       	rcall	.-1288   	; 0x1526 <__addsf3>
    1a2e:	e4 eb       	ldi	r30, 0xB4	; 180
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	03 c0       	rjmp	.+6      	; 0x1a3a <log+0x4a>
    1a34:	78 dd       	rcall	.-1296   	; 0x1526 <__addsf3>
    1a36:	e1 ee       	ldi	r30, 0xE1	; 225
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	73 df       	rcall	.-282    	; 0x1922 <__fp_powser>
    1a3c:	8b 01       	movw	r16, r22
    1a3e:	be 01       	movw	r22, r28
    1a40:	ec 01       	movw	r28, r24
    1a42:	fb 2e       	mov	r15, r27
    1a44:	6f 57       	subi	r22, 0x7F	; 127
    1a46:	71 09       	sbc	r23, r1
    1a48:	75 95       	asr	r23
    1a4a:	77 1f       	adc	r23, r23
    1a4c:	88 0b       	sbc	r24, r24
    1a4e:	99 0b       	sbc	r25, r25
    1a50:	fc dd       	rcall	.-1032   	; 0x164a <__floatsisf>
    1a52:	28 e1       	ldi	r18, 0x18	; 24
    1a54:	32 e7       	ldi	r19, 0x72	; 114
    1a56:	41 e3       	ldi	r20, 0x31	; 49
    1a58:	5f e3       	ldi	r21, 0x3F	; 63
    1a5a:	8f de       	rcall	.-738    	; 0x177a <__mulsf3x>
    1a5c:	af 2d       	mov	r26, r15
    1a5e:	98 01       	movw	r18, r16
    1a60:	ae 01       	movw	r20, r28
    1a62:	ff 90       	pop	r15
    1a64:	0f 91       	pop	r16
    1a66:	1f 91       	pop	r17
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	6d dd       	rcall	.-1318   	; 0x1548 <__addsf3x>
    1a6e:	3f ce       	rjmp	.-898    	; 0x16ee <__fp_round>

00001a70 <modf>:
    1a70:	fa 01       	movw	r30, r20
    1a72:	dc 01       	movw	r26, r24
    1a74:	aa 0f       	add	r26, r26
    1a76:	bb 1f       	adc	r27, r27
    1a78:	9b 01       	movw	r18, r22
    1a7a:	ac 01       	movw	r20, r24
    1a7c:	bf 57       	subi	r27, 0x7F	; 127
    1a7e:	28 f4       	brcc	.+10     	; 0x1a8a <modf+0x1a>
    1a80:	22 27       	eor	r18, r18
    1a82:	33 27       	eor	r19, r19
    1a84:	44 27       	eor	r20, r20
    1a86:	50 78       	andi	r21, 0x80	; 128
    1a88:	1f c0       	rjmp	.+62     	; 0x1ac8 <modf+0x58>
    1a8a:	b7 51       	subi	r27, 0x17	; 23
    1a8c:	88 f4       	brcc	.+34     	; 0x1ab0 <modf+0x40>
    1a8e:	ab 2f       	mov	r26, r27
    1a90:	00 24       	eor	r0, r0
    1a92:	46 95       	lsr	r20
    1a94:	37 95       	ror	r19
    1a96:	27 95       	ror	r18
    1a98:	01 1c       	adc	r0, r1
    1a9a:	a3 95       	inc	r26
    1a9c:	d2 f3       	brmi	.-12     	; 0x1a92 <modf+0x22>
    1a9e:	00 20       	and	r0, r0
    1aa0:	69 f0       	breq	.+26     	; 0x1abc <modf+0x4c>
    1aa2:	22 0f       	add	r18, r18
    1aa4:	33 1f       	adc	r19, r19
    1aa6:	44 1f       	adc	r20, r20
    1aa8:	b3 95       	inc	r27
    1aaa:	da f3       	brmi	.-10     	; 0x1aa2 <modf+0x32>
    1aac:	0d d0       	rcall	.+26     	; 0x1ac8 <modf+0x58>
    1aae:	3a cd       	rjmp	.-1420   	; 0x1524 <__subsf3>
    1ab0:	61 30       	cpi	r22, 0x01	; 1
    1ab2:	71 05       	cpc	r23, r1
    1ab4:	a0 e8       	ldi	r26, 0x80	; 128
    1ab6:	8a 07       	cpc	r24, r26
    1ab8:	b9 46       	sbci	r27, 0x69	; 105
    1aba:	30 f4       	brcc	.+12     	; 0x1ac8 <modf+0x58>
    1abc:	9b 01       	movw	r18, r22
    1abe:	ac 01       	movw	r20, r24
    1ac0:	66 27       	eor	r22, r22
    1ac2:	77 27       	eor	r23, r23
    1ac4:	88 27       	eor	r24, r24
    1ac6:	90 78       	andi	r25, 0x80	; 128
    1ac8:	30 96       	adiw	r30, 0x00	; 0
    1aca:	21 f0       	breq	.+8      	; 0x1ad4 <modf+0x64>
    1acc:	20 83       	st	Z, r18
    1ace:	31 83       	std	Z+1, r19	; 0x01
    1ad0:	42 83       	std	Z+2, r20	; 0x02
    1ad2:	53 83       	std	Z+3, r21	; 0x03
    1ad4:	08 95       	ret

00001ad6 <__divsf3>:
    1ad6:	0c d0       	rcall	.+24     	; 0x1af0 <__divsf3x>
    1ad8:	0a ce       	rjmp	.-1004   	; 0x16ee <__fp_round>
    1ada:	02 de       	rcall	.-1020   	; 0x16e0 <__fp_pscB>
    1adc:	40 f0       	brcs	.+16     	; 0x1aee <__divsf3+0x18>
    1ade:	f9 dd       	rcall	.-1038   	; 0x16d2 <__fp_pscA>
    1ae0:	30 f0       	brcs	.+12     	; 0x1aee <__divsf3+0x18>
    1ae2:	21 f4       	brne	.+8      	; 0x1aec <__divsf3+0x16>
    1ae4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae6:	19 f0       	breq	.+6      	; 0x1aee <__divsf3+0x18>
    1ae8:	eb cd       	rjmp	.-1066   	; 0x16c0 <__fp_inf>
    1aea:	51 11       	cpse	r21, r1
    1aec:	34 ce       	rjmp	.-920    	; 0x1756 <__fp_szero>
    1aee:	ee cd       	rjmp	.-1060   	; 0x16cc <__fp_nan>

00001af0 <__divsf3x>:
    1af0:	0f de       	rcall	.-994    	; 0x1710 <__fp_split3>
    1af2:	98 f3       	brcs	.-26     	; 0x1ada <__divsf3+0x4>

00001af4 <__divsf3_pse>:
    1af4:	99 23       	and	r25, r25
    1af6:	c9 f3       	breq	.-14     	; 0x1aea <__divsf3+0x14>
    1af8:	55 23       	and	r21, r21
    1afa:	b1 f3       	breq	.-20     	; 0x1ae8 <__divsf3+0x12>
    1afc:	95 1b       	sub	r25, r21
    1afe:	55 0b       	sbc	r21, r21
    1b00:	bb 27       	eor	r27, r27
    1b02:	aa 27       	eor	r26, r26
    1b04:	62 17       	cp	r22, r18
    1b06:	73 07       	cpc	r23, r19
    1b08:	84 07       	cpc	r24, r20
    1b0a:	38 f0       	brcs	.+14     	; 0x1b1a <__divsf3_pse+0x26>
    1b0c:	9f 5f       	subi	r25, 0xFF	; 255
    1b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b10:	22 0f       	add	r18, r18
    1b12:	33 1f       	adc	r19, r19
    1b14:	44 1f       	adc	r20, r20
    1b16:	aa 1f       	adc	r26, r26
    1b18:	a9 f3       	breq	.-22     	; 0x1b04 <__divsf3_pse+0x10>
    1b1a:	33 d0       	rcall	.+102    	; 0x1b82 <__divsf3_pse+0x8e>
    1b1c:	0e 2e       	mov	r0, r30
    1b1e:	3a f0       	brmi	.+14     	; 0x1b2e <__divsf3_pse+0x3a>
    1b20:	e0 e8       	ldi	r30, 0x80	; 128
    1b22:	30 d0       	rcall	.+96     	; 0x1b84 <__divsf3_pse+0x90>
    1b24:	91 50       	subi	r25, 0x01	; 1
    1b26:	50 40       	sbci	r21, 0x00	; 0
    1b28:	e6 95       	lsr	r30
    1b2a:	00 1c       	adc	r0, r0
    1b2c:	ca f7       	brpl	.-14     	; 0x1b20 <__divsf3_pse+0x2c>
    1b2e:	29 d0       	rcall	.+82     	; 0x1b82 <__divsf3_pse+0x8e>
    1b30:	fe 2f       	mov	r31, r30
    1b32:	27 d0       	rcall	.+78     	; 0x1b82 <__divsf3_pse+0x8e>
    1b34:	66 0f       	add	r22, r22
    1b36:	77 1f       	adc	r23, r23
    1b38:	88 1f       	adc	r24, r24
    1b3a:	bb 1f       	adc	r27, r27
    1b3c:	26 17       	cp	r18, r22
    1b3e:	37 07       	cpc	r19, r23
    1b40:	48 07       	cpc	r20, r24
    1b42:	ab 07       	cpc	r26, r27
    1b44:	b0 e8       	ldi	r27, 0x80	; 128
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <__divsf3_pse+0x56>
    1b48:	bb 0b       	sbc	r27, r27
    1b4a:	80 2d       	mov	r24, r0
    1b4c:	bf 01       	movw	r22, r30
    1b4e:	ff 27       	eor	r31, r31
    1b50:	93 58       	subi	r25, 0x83	; 131
    1b52:	5f 4f       	sbci	r21, 0xFF	; 255
    1b54:	2a f0       	brmi	.+10     	; 0x1b60 <__divsf3_pse+0x6c>
    1b56:	9e 3f       	cpi	r25, 0xFE	; 254
    1b58:	51 05       	cpc	r21, r1
    1b5a:	68 f0       	brcs	.+26     	; 0x1b76 <__divsf3_pse+0x82>
    1b5c:	b1 cd       	rjmp	.-1182   	; 0x16c0 <__fp_inf>
    1b5e:	fb cd       	rjmp	.-1034   	; 0x1756 <__fp_szero>
    1b60:	5f 3f       	cpi	r21, 0xFF	; 255
    1b62:	ec f3       	brlt	.-6      	; 0x1b5e <__divsf3_pse+0x6a>
    1b64:	98 3e       	cpi	r25, 0xE8	; 232
    1b66:	dc f3       	brlt	.-10     	; 0x1b5e <__divsf3_pse+0x6a>
    1b68:	86 95       	lsr	r24
    1b6a:	77 95       	ror	r23
    1b6c:	67 95       	ror	r22
    1b6e:	b7 95       	ror	r27
    1b70:	f7 95       	ror	r31
    1b72:	9f 5f       	subi	r25, 0xFF	; 255
    1b74:	c9 f7       	brne	.-14     	; 0x1b68 <__divsf3_pse+0x74>
    1b76:	88 0f       	add	r24, r24
    1b78:	91 1d       	adc	r25, r1
    1b7a:	96 95       	lsr	r25
    1b7c:	87 95       	ror	r24
    1b7e:	97 f9       	bld	r25, 7
    1b80:	08 95       	ret
    1b82:	e1 e0       	ldi	r30, 0x01	; 1
    1b84:	66 0f       	add	r22, r22
    1b86:	77 1f       	adc	r23, r23
    1b88:	88 1f       	adc	r24, r24
    1b8a:	bb 1f       	adc	r27, r27
    1b8c:	62 17       	cp	r22, r18
    1b8e:	73 07       	cpc	r23, r19
    1b90:	84 07       	cpc	r24, r20
    1b92:	ba 07       	cpc	r27, r26
    1b94:	20 f0       	brcs	.+8      	; 0x1b9e <__divsf3_pse+0xaa>
    1b96:	62 1b       	sub	r22, r18
    1b98:	73 0b       	sbc	r23, r19
    1b9a:	84 0b       	sbc	r24, r20
    1b9c:	ba 0b       	sbc	r27, r26
    1b9e:	ee 1f       	adc	r30, r30
    1ba0:	88 f7       	brcc	.-30     	; 0x1b84 <__divsf3_pse+0x90>
    1ba2:	e0 95       	com	r30
    1ba4:	08 95       	ret

00001ba6 <__fp_mpack>:
    1ba6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ba8:	31 f0       	breq	.+12     	; 0x1bb6 <__fp_mpack_finite+0xc>

00001baa <__fp_mpack_finite>:
    1baa:	91 50       	subi	r25, 0x01	; 1
    1bac:	20 f4       	brcc	.+8      	; 0x1bb6 <__fp_mpack_finite+0xc>
    1bae:	87 95       	ror	r24
    1bb0:	77 95       	ror	r23
    1bb2:	67 95       	ror	r22
    1bb4:	b7 95       	ror	r27
    1bb6:	88 0f       	add	r24, r24
    1bb8:	91 1d       	adc	r25, r1
    1bba:	96 95       	lsr	r25
    1bbc:	87 95       	ror	r24
    1bbe:	97 f9       	bld	r25, 7
    1bc0:	08 95       	ret

00001bc2 <memset>:
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	01 c0       	rjmp	.+2      	; 0x1bc8 <memset+0x6>
    1bc6:	6d 93       	st	X+, r22
    1bc8:	41 50       	subi	r20, 0x01	; 1
    1bca:	50 40       	sbci	r21, 0x00	; 0
    1bcc:	e0 f7       	brcc	.-8      	; 0x1bc6 <memset+0x4>
    1bce:	08 95       	ret

00001bd0 <strncpy>:
    1bd0:	fb 01       	movw	r30, r22
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	41 50       	subi	r20, 0x01	; 1
    1bd6:	50 40       	sbci	r21, 0x00	; 0
    1bd8:	48 f0       	brcs	.+18     	; 0x1bec <strncpy+0x1c>
    1bda:	01 90       	ld	r0, Z+
    1bdc:	0d 92       	st	X+, r0
    1bde:	00 20       	and	r0, r0
    1be0:	c9 f7       	brne	.-14     	; 0x1bd4 <strncpy+0x4>
    1be2:	01 c0       	rjmp	.+2      	; 0x1be6 <strncpy+0x16>
    1be4:	1d 92       	st	X+, r1
    1be6:	41 50       	subi	r20, 0x01	; 1
    1be8:	50 40       	sbci	r21, 0x00	; 0
    1bea:	e0 f7       	brcc	.-8      	; 0x1be4 <strncpy+0x14>
    1bec:	08 95       	ret

00001bee <_exit>:
    1bee:	f8 94       	cli

00001bf0 <__stop_program>:
    1bf0:	ff cf       	rjmp	.-2      	; 0x1bf0 <__stop_program>
